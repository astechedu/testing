>>>> PHP Security <<<<<


--------------------------------------------------------------
--------------------------------------------------------------
Kerys: PHP Security
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------


PHP Security: 

https://www.cloudways.com/blog/php-security/

//Table of Content:

    Security Issues in PHP CMS
    Cross-site scripting (XSS)
    SQL Injection Attacks
    Cross site request forgery XSRF/CSRF
    Session Hijacking
    Hide Files from the Browser



//Cross-site scripting (XSS)

    URL: http://example.com/search.php?search=<script>alert('test')</script>
    $search = $_GET['search'] ?? null;
    echo 'Search results for '.$search;


You can figure out this attack by using htmlspecialchars. Also by using ENT_QUOTES, you can escape single and double quotes.

$search = htmlspecialchars($search, ENT_QUOTES, 'UTF-8');
echo 'Search results for '.$search;


//SQL Injection Attacks

$sql = "SELECT * FROM users WHERE username = '" . $username . "';

PDO helps you in securing SQL queries.

  $id = $_GET['id'] ?? null;

  $dbh = new PDO('mysql:dbname=testdb;host=127.0.0.1', 'dbusername', 'dbpassword');


    $sql = "SELECT username, email FROM users WHERE id = ".$id." ;
    foreach ($dbh->query($sql) as $row) {
       printf ("%s (%s)\n", $row['username'], $row['email']);
    }

//Now you can avoid the above SQL injection possibility by using 



    $sql = "SELECT username, email FROM users WHERE id = :id";
    $sth = $dbh->prepare($sql, [PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY]);
    $sth->execute([':id' => $id]);
    $users = $sth->fetchAll();


Also, a good practice is to use ORM like doctrine or eloquent, as there is the least possibility of injecting SQL queries in them.



//Cross site request forgery XSRF/CSRF

    GET http://bank.com/transfer.do?acct=TIM&amount=100 HTTP/1.1

    http://bank.com/transfer.do?acct=Sandy&amount=100000




//Session Hijacking


To prevent session hijacking always bind sessions to your IP address to:

 $IP = getenv ( "REMOTE_ADDR" );


setcookie ($name, "", 1);
setcookie ($name, false);
unset($_COOKIE[$name]);



//Securely Upload Files

$finfo = new finfo(FILEINFO_MIME_TYPE);
$fileContents = file_get_contents($_FILES['some_name']['tmp_name']);
$mimeType = $finfo->buffer($fileContents);


Letâ€™s look at another example. The HTML of form should be like this:

    <form method="post" enctype="multipart/form-data" action="upload.php">
       File: <input type="file" name="pictures[]" multiple="true">
       <input type="submit">
    </form>


And upload.php contains the following code:


foreach ($_FILES['pictures']['error'] as $key => $error) {

   if ($error == UPLOAD_ERR_OK) {
       $tmpName = $_FILES['pictures']['tmp_name'][$key];
       $name = basename($_FILES['pictures']['name'][$key]);
       move_uploaded_file($tmpName, "/var/www/project/uploads/$name");
   }
}



--------------------------------------------------------------




