<<<<< APIs PHP  >>>>


--------------------------------------------------------
--------------------------------------------------------
Keys: APIs, Logincal Symbols & Statements,Logical Operators,Ternary Operator,
      Increment & Decrement Order,For Loop,

--------------------------------------------------------
--------------------------------------------------------

//Freasers
//PHP With code: PHP Important projects Suggestion
https://www.interviewbit.com/blog/php-projects/

--------------------------------------------------------
--------------------------------------------------------

--------------------------------------------------------
--------------------------------------------------------


cURL PHP :

//Create a database:

CREATE DATABASE phptest;


//Create a table:

CREATE TABLE IF NOT EXISTS `transactions` 
(
   `id` int(20) NOT NULL AUTO_INCREMENT,
   `order_id` int(50) NOT NULL,
   `amount` decimal(9,2) NOT NULL,
   `response_code` int(10) NOT NULL,
   `response_desc` varchar(50) NOT NULL,
   PRIMARY KEY (`id`),
   UNIQUE KEY `order_id` (`order_id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 ;




//Create a Database Connection:

<?php
// Enter your Host, username, password, database below.
$con = mysqli_connect("localhost","root","","phptest");
if (mysqli_connect_errno())
{
    echo "Failed to connect to MySQL: " . mysqli_connect_error();
    die();
}
?>


//Create a REST API File:

<?php
header("Content-Type:application/json");
if (isset($_GET['order_id']) && $_GET['order_id']!="") 
{
include('db.php');
$order_id = $_GET['order_id'];
$result = mysqli_query($con,
       "SELECT * FROM `transactions` WHERE order_id=$order_id");
if(mysqli_num_rows($result)>0)
       {
    $row = mysqli_fetch_array($result);
    $amount = $row['amount'];
           $response_code = $row['response_code'];
           $response_desc = $row['response_desc'];
    response($order_id, $amount, $response_code, $response_desc);
    mysqli_close($con);
}
       else
       {
     response(NULL, NULL, 200,"No Record Found");
}
}
else
{
response(NULL, NULL, 400,"Request is invalid");
}
function response($order_id,$amount,$response_code, $response_desc)
{
$response['order_id'] = $order_id;
$response['amount'] = $amount;
$response['response_code'] = $response_code;
       $response['response_desc'] = $response_desc;
$json_response = json_encode($response);
echo $json_response;
}
?>


//localhost/api.php?order_id=101

---------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------




//Logincal Symbols & Statements:
https://www.codecademy.com/learn/learn-php/modules/conditionals-logic-php/cheatsheet


PHP comparison operators:

// Comparison operators
1 > 3; // FALSE
3 > 1; // TRUE
250 >= 250; // TRUE
1 === 1; // TRUE
1 === 2; // FALSE
1 === "1"; // FALSE



PHP Boolean Values:

// booleans
$is_true = TRUE;
$is_false = FALSE;

echo gettype($is_true); 
// Prints: boolean
echo gettype($is_false); 
// Prints: boolean



PHP ternary operator:

// Without ternary
$isClicked = FALSE;
if ($isClicked) {
  $link_color = "purple";
} else {
  $link_color = "blue";
}
// $link_color = "blue";


// With ternary
$isClicked = FALSE;
$link_color = $isClicked ? "purple" : "blue";
//  $link_color = "blue";


PHP Logical Operators:

// Examples of Logical Operators:

TRUE || TRUE;   // Evaluates to: TRUE
FALSE || TRUE;  // Evaluates to: TRUE
TRUE && TRUE;    // Evaluates to: TRUE
FALSE && TRUE;   // Evaluates to: FALSE
!TRUE;    // Evaluates to: FALSE
!FALSE;   // Evaluates to: TRUE
TRUE xor TRUE;   // Evaluates to: FALSE
FALSE xor TRUE;  // Evaluates to: TRUE


PHP && Operator:

TRUE && TRUE;    // Evaluates to: TRUE
FALSE && TRUE;   // Evaluates to: FALSE
TRUE && FALSE;   // Evaluates to: FALSE
FALSE && FALSE;  // Evaluates to: FALSE

$passingGrades = TRUE;
$extracurriculars = TRUE;
if ($passingGrades && $extracurriculars){
  echo "You meet the graduation requirements.";
}
// Prints: You meet the graduation requirements.


PHP ! (not) Operator:

!TRUE;    // Evaluates to: FALSE
!FALSE;   // Evaluates to: TRUE


PHP Operator Precedence:

TRUE || TRUE && FALSE // Evaluates to: TRUE
(TRUE || TRUE) && FALSE // Evaluates to: FALSE



PHP Xor Operator:

TRUE xor TRUE;   // Evaluates to: FALSE
FALSE xor TRUE;  // Evaluates to: TRUE
TRUE xor FALSE;  // Evaluates to: TRUE
FALSE xor FALSE; // Evaluates to: FALSE


Logical Operators - Alternate Syntax:
// The or Operator:
TRUE or TRUE;   // Evaluates to: TRUE
FALSE or TRUE;  // Evaluates to: TRUE
TRUE or FALSE;  // Evaluates to: TRUE
FALSE or FALSE; // Evaluates to: FALSE

// The and Operator:
TRUE and TRUE;   // Evaluates to: TRUE
FALSE and TRUE;  // Evaluates to: FALSE
TRUE and FALSE;  // Evaluates to: FALSE
FALSE and FALSE; // Evaluates to: FALSE


----------------------------------------------------

>>Logical Operators:
$a and $b    And  True if both $a and $b are TRUE
$a && $b     And  True if both $a and $b are TRUE
$a or $b Or  TRUE if either $a or $b is TRUE
$a || $b Or  TRUE if either $a or $b is TRUE
$a xor $b    Xor TRUE if either $a or $b is TRUE, but not both

Example:
$a=5;
$b=5;
$c=19;


if($a==$b or(||) $a == $c){      // or or ||
 echo "True";
}else{
 echo "False";
}

if($a==$b and(&&) $a == $c){     // && or and
 echo "True";
}else{
 echo "False";
}

if($a==$b xor $a == $c){
 echo "True";
}else{
 echo "False";
}
---------------------------------------------------------------------------------------

>> Ternary Operator:

The ternary opearator takes three operands-a condition, a result for true, and a result for false.

$a=5;

if($a==5){
  echo "Yes, It's equal";
}else{
  echo "Oo No, It's not equal";
}

          --True--             --False--
echo ($a==5) ? "Yes, It's equal" : "No, It's not equal";

echo ($a==5) ? "Yes, It's equal to {$a}" : "No, It's not equal";

--------------------------------------------------------------------------------------

>> Incrementing/Decrementing Order:
PHP supports C-style pre- and post-increment and decrement operators.

++$a Pre-increment   Increments $a by one, then returns $a.
$a++ Post-increment  Returns $a, then increments $a by one.
--$a Pre-decrement   Decrements $a by one, then returns $a.
$a-- Post-decrement  Returns $a, then decrements $a by one.

Example:

$a=5;
echo ++$a;  Output: 6     //1+5=6  adding 1 before
$a=6;

$a=5;
echo $a++;  Output: 5    //5 + 1 = 6  adding 1 after
$a=6;

$a=2;
$b=3;
$c= ++$a + $b++;

$a=5;
echo --$a    output: 4    //-1 + 5 = 4
$a=4;

$a=5;
echo $a--    output: 5    //5 - 1 = 4
$a=4


$a=1;
$b=2;
$c = $a++ + ++$b;       //1 + 3 = 4      
echo $c;
or
echo $c = ++$a + $b++;  // 2 + 2 = 4
echo $c;

$a=2;
$c = ++$a  + $a++  // 3 + 3 = 6;  (1+2) + (3) = 3 + 3 = 6
echo $c; 

$a=2;
$c = $a++ + $a++ ++$a;   //2 + 3 + 5 = 10;  2+(2+1)+(4+1) = 2+3+5=10
echo $c;

--------------------------------------------------------

>> For Loop: 

for($i=1; $i<=10; $i++){ 
  echo $i;   
  echo "<br />";
}

echo 'Out of Loop $i ='.$i;


--------------------------------------------------------
