>>>> Oracle <<<


-----------------------------------------------------------------------
-----------------------------------------------------------------------
Keys: Create Table, 
-----------------------------------------------------------------------
-----------------------------------------------------------------------
-----------------------------------------------------------------------
Website:
https://blog.devart.com/how-to-create-table-in-oracle.html

Update:
https://www.techonthenet.com/oracle/update.php

-----------------------------------------------------------------------
-----------------------------------------------------------------------


 PL/SQL:


Create Table:

Oracle CREATE TABLE statement 

syntax:

CREATE TABLE schema_name.table_name (
    column_1 data_type column_constraint,
    column_2 data_type column_constraint,
    ...
    table_constraint
 );




CREATE TABLE example:


CREATE TABLE employees
( employee_id number(10) NOT NULL,
  employee_name varchar2(50) NOT NULL,
  city varchar2(50)
);





//CREATE TABLE with PRIMARY KEY constraint:


CREATE TABLE employees
( employee_id number(10) NOT NULL,
  employee_name varchar2(50) NOT NULL,
  city varchar2(50),
  CONSTRAINT employees_pk PRIMARY KEY (employee_id)
);




//CREATE TABLE with FOREIGN KEY:



CREATE TABLE dept
( dept_id number(10) NOT NULL,
dept_name varchar2(50) NOT NULL,
CONSTRAINT dept_pk PRIMARY KEY (dept_id)
);



CREATE TABLE emp
( emp_no number(10) NOT NULL,
emp_name varchar2(50) NOT NULL,
dept_id number(10),
salary number(6),
CONSTRAINT emp_pk PRIMARY KEY (emp_no),
CONSTRAINT dept_fk
FOREIGN KEY (dept_id)
REFERENCES dept(dept_id) );


CREATE TABLE with NOT NULL column:


CREATE TABLE employees_bdays
(
emp_name VARCHAR(30),
bday DATE
emp_id VARCHAR(15) NOT NULL
);



//CREATE TABLE with a date column

CREATE TABLE employees_bdays (
bday DATE
);



//CREATE TABLE with a date column

CREATE TABLE employees_bdays (
bday DATE
);



to_date('01 December 2021','DD Month YYYY')
to_date('01/12/2021','DD/MM/YYYY')


//CREATE TABLE IF NOT EXISTS


//CREATE TABLE AS SELECT

CREATE TABLE table_name AS (
SELECT select_query
);


//CREATE TABLE from SELECT in PL/SQL

CREATE TABLE new_table
  AS (SELECT * FROM old_table);


//How to create and insert data into a temporary table

CREATE GLOBAL TEMPORARY TABLE admin_work_area
        (startdate DATE,
         enddate DATE,
         operation CHAR(20))
      ON COMMIT DELETE ROWS;



//ALTER TABLE Example

CREATE TABLE ot.customers(
    person_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    first_name VARCHAR2(50) NOT NULL,
    last_name VARCHAR2(50) NOT NULL,
);


//ALTER TABLE ADD COLUMN in Oracle

ALTER TABLE table_name
  ADD column_name;


ALTER TABLE customers
ADD phone_number varchar2(50) NOT NULL;


//How to Add Multiple Columns

ALTER TABLE table_name
  ADD (column_1,
       column_2,
       ...
       );


//Oracle ALTER TABLE RENAME Column

ALTER TABLE table_name
  RENAME COLUMN old_name TO new_name;


ALTER TABLE table_name
  RENAME COLUMN first_name TO customer_first_name;


//Oracle ALTER TABLE MODIFY for Column

ALTER TABLE customers 
  MODIFY column_name column_type;

ALTER TABLE customers
  MODIFY first_name varchar2(100) NOT NULL;


//ALTER TABLE DROP Column

ALTER TABLE table_name
  DROP COLUMN column_name;

ALTER TABLE customers 
  DROP COLUMN phone_number;


//How to DROP Multiple Columns

ALTER TABLE customers 
  DROP COLUMN (cutomer_first_name, last_name, phone_number);


//Oracle / PLSQL: UPDATE Statement


Syntax:

The syntax for the UPDATE statement when updating one table in Oracle/PLSQL is:

UPDATE table
SET column1 = expression1,
    column2 = expression2,
    ...
    column_n = expression_n
[WHERE conditions];

OR

The syntax for the Oracle UPDATE statement when updating one table with data from another table is:

UPDATE table1
SET column1 = (SELECT expression1
               FROM table2
               WHERE conditions)
[WHERE conditions];

//Example - Update single column

UPDATE customers
SET last_name = 'Anderson'
WHERE customer_id = 5000;

//Example - Update multiple columns

UPDATE customers
SET state = 'California',
    customer_rep = 32
WHERE customer_id > 100;

//Example - Update table with data from another table

UPDATE customers
SET c_details = (SELECT contract_date
                 FROM suppliers
                 WHERE suppliers.supplier_name = customers.customer_name)
WHERE customer_id < 1000;


//Example - Using EXISTS Clause

UPDATE suppliers
SET supplier_name = (SELECT customers.customer_name
                     FROM customers
                     WHERE customers.customer_id = suppliers.supplier_id)
WHERE EXISTS (SELECT customers.customer_name
              FROM customers
              WHERE customers.customer_id = suppliers.supplier_id);



//Practice Exercise #1:

CREATE TABLE suppliers
( supplier_id number(10) not null,
  supplier_name varchar2(50) not null,
  city varchar2(50),
  CONSTRAINT suppliers_pk PRIMARY KEY (supplier_id)
);




INSERT INTO suppliers (supplier_id, supplier_name, city)
VALUES (5001, 'Microsoft', 'Chicago');

INSERT INTO suppliers (supplier_id, supplier_name, city)
VALUES (5002, 'IBM', 'Chicago');

INSERT INTO suppliers (supplier_id, supplier_name, city)
VALUES (5003, 'Red Hat', 'Detroit');

INSERT INTO suppliers (supplier_id, supplier_name, city)
VALUES (5004, 'NVIDIA', 'New York');


//Solution for Practice Exercise #1:

UPDATE suppliers
SET city = 'San Francisco'
WHERE supplier_name = 'IBM';
	
//Practice Exercise #2:

CREATE TABLE suppliers
( supplier_id number(10) not null,
  supplier_name varchar2(50) not null,
  city varchar2(50),
  CONSTRAINT suppliers_pk PRIMARY KEY (supplier_id)
);

INSERT INTO suppliers (supplier_id, supplier_name, city)
VALUES (5001, 'Microsoft', 'New York');

INSERT INTO suppliers (supplier_id, supplier_name, city)
VALUES (5002, 'IBM', 'Chicago');

INSERT INTO suppliers (supplier_id, supplier_name, city)
VALUES (5003, 'Red Hat', 'Detroit');

INSERT INTO suppliers (supplier_id, supplier_name, city)
VALUES (5005, 'NVIDIA', 'LA');



CREATE TABLE customers
( customer_id number(10) not null,
  customer_name varchar2(50) not null,
  city varchar2(50),
  CONSTRAINT customers_pk PRIMARY KEY (customer_id)
);

INSERT INTO customers (customer_id, customer_name, city)
VALUES (7001, 'Microsoft', 'San Francisco');

INSERT INTO customers (customer_id, customer_name, city)
VALUES (7002, 'IBM', 'Toronto');

INSERT INTO customers (customer_id, customer_name, city)
VALUES (7003, 'Red Hat', 'Newark');



//Solution for Practice Exercise #2:

The following UPDATE statement would perform this update in Oracle.

UPDATE suppliers
SET city = (SELECT customers.city
            FROM customers
            WHERE customers.customer_name = suppliers.supplier_name)
WHERE EXISTS (SELECT customers.city
              FROM customers
              WHERE customers.customer_name = suppliers.supplier_name);
























-------------------------------------------------------------------------



















