>>>> MongoDB <<<<<


--------------------------------------------------------------

--------------------------------------------------------------
--------------------------------------------------------------
Keys: Create, Insert, Find, Drop, Update, limit(), 

      $set, $inc, $gte, $eq, $expr, $not, $in, $or, $and, $nin, $ne, $lte, $gte, 
      sort, 


      Updates with Aggregation Pipeline


Ith the update operations, the aggregation pipeline can consist of the following stages:

    $addFields, $set, $project, $unset, $replaceRoot, $replaceWith,


    Inserted Document, Projection, 



--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------

//Mongo db tutorial 
https://www.youtube.com/watch?v=Cjr-gkQSii8


--------------------------------------------------------------------------
--------------------------------------------------------------------------
--------------------------------------------------------------------------
Given Json File: 
//Import json to create collection 
https://youtu.be/I0fxhB81nqc?t=160

mongoimport "C:\Users\ajay\documents\new folder\students.json" -d college -c students --jonArray --drop

--------------------------------------------------------------------------

----> queries <----


//Method 1: Add New Field Without Values:

	db.collection.updateMany({}, {$set:{"new_field": null}})

//Method 2: Add New Field With Specific Value:

	db.collection.updateMany({}, {$set:{"new_field": 10}}) 

//Method 3: Add New Field Using Values from Existing Fields:

db.collection.updateMany(
    {},
    [
        {"$set": {"name": { "$concat": ["$field1", " ", "$field2"]}}}
    ]
)



//Example 1: Add New Field Without Values

	db.teams.updateMany({}, {$set:{"rebounds": null}})
	db.teams.find().limit(3)

//Example 2: Add New Field With Specific Value:

	db.teams.updateMany({}, {$set:{"rebounds": 10}})
        db.teams.find().limit(3)


//Example 3: Add New Field Using Values from Existing Fields

db.teams.updateMany(
    {},
    [
        {"$set": {"name": { "$concat": ["$team", " ", "$position"]}}}
    ]
)


db.teams.find().limit(3)



--------------------------------------------------------------------------
--------------------------------------------------------------------------


Link: 

https://appinventiv.com/blog/top-web-app-database-list/



Which is best Database for web applications In 2022?

SQL database examples

    Oracle.    //an object-relational DBMS written in the C++; //Oracle has also released an Oracle NoSQL database
    MySQL.
    SQLite
    DynamoDB 
    MS SQL Server.
    PostgreSQL.
    IBM DB2.
    Redis.         
    
    Sybase
    Firebirdsql
    Amazon RDS
    Google Cloud SQL
    Microsoft Azure    

7 Best NoSQL Databases for Data Science

    MongoDB           //document-oriented database
    Cassandra         //It can distribute your data across multiple machines
    Elasticsearch     //document-oriented database
    Neo4j             //graph-oriented database
    HBase             //a distributed and column-oriented database
    CouchDB           //document-oriented database
    OrientDB          //a multi-model database supporting graph, document, key-value, and object model
   


What are the common types of NoSQL databases?

Types               Performence     Scalability      Flexibility      Complexity

Key-Value Store     High            High             High             None
Column Store        High            High             Moderate         Low
Document            High            Variable(High)   High             Low
Graph Database      Variable        Variable         High             High  



-------------------------------------------------------------------------



Connect MongoDB with PHP: 

1. Make a Connection and Select a Database

<?php
  // connect to mongodb
  $m = new MongoClient();
  echo "Connection to database successfully";
  // select a database
  $db = $m->examplesdb;
  echo "Database examplesdb selected";
?>


2. Create a Collection:


<?php
  // connect to mongodb
  $m = new MongoClient();
  echo "Connection to database successfully";
  // select a database
  $db = $m->examplesdb;
  echo "Database examplesdb selected";
  $collection = $db->createCollection("examplescol");
  echo "Collection created succsessfully";
?>



3. Insert a Document

<?php
  // connect to mongodb
  $m = new MongoClient();
  echo "Connection to database successfully";
  // select a database
  $db = $m->examplesdb;
  echo "Database examplesdb selected";
  $collection = $db->examplescol;
  echo "Collection selected succsessfully";
  $document = array( 
  "title" => "MongoDB", 
  "description" => "database", 
  "likes" => 100,
  "url" => "http://www.data-flair.training/mongodb/",
  "by" => "data flair"
 );
$collection->insert($document);
echo "Document inserted successfully";
?>


4. Find All Documents:


<?php
  // connect to mongodb
  $m = new MongoClient();
  echo "Connection to database successfully";
  // select a database
  $db = $m->examplesdb;
  echo "Database examplesdb selected";
  $collection = $db->examplescol;
  echo "Collection selected succsessfully";
  $cursor = $collection->find();
  // iterate cursor to display title of documents
  foreach ($cursor as $document) {
  echo $document["title"] . "\n";
 }
?>


After executing the following code you will get this output:
Connection to database successfully
Database examplesdb selected
Collection selected succsessfully {
"title": "MongoDB"
}


5. Update a Document:

<?php
   // connect to mongodb
   $m = new MongoClient();
   echo "Connection to database successfully";

   // select a database
   $db = $m->examplesdb;
   echo "Database examplesdb selected";
   $collection = $db->examplescol;
   echo "Collection selected succsessfully";

   // now update the document
   $collection->update(array("name"=>"MongoDB"), 
   array('$set'=>array("name"=>"MongoDB Tutorial")));
   echo "Document updated successfully";

   // now display the updated document
   $cursor = $collection->find();

   // iterate cursor to display title of documents
   echo "Updated document";

   foreach ($cursor as $document) {
   echo $document["name"] . "\n";
 }
?>



6. Delete a Document


<?php
   // connect to mongodb
   $m = new MongoClient();
   echo "Connection to database successfully";

   // select a database
   $db = $m->examplesdb;
   echo "Database examplesdb selected";
   $collection = $db->examplescol;
   echo "Collection selected succsessfully";

   // now remove the document
   $collection->remove(array("name"=>"MongoDB Tutorial"),false);
   echo "Documents deleted successfully";

   // now display the available documents
   $cursor = $collection->find();

   // iterate cursor to display title of documents
   echo "Updated document";

   foreach ($cursor as $document) {
   echo $document["name"] . "\n";
 }
?>



After executing the program you will get the following output:

Connection to the database successfully

Database examplesdb selected

Collection selected successfully

Documents deleted successfully


------------------------------------------------------------


Install the MongoDB Node.js Driver:


npm install mongodb

Create a free MongoDB Atlas cluster and load the sample data

Connect to your database from a Node.js application


Import MongoClient

const {MongoClient} = require('mongodb');


Create our main function:

async function main() {
	// we'll add code here soon
}



Note: the username and password you provide in the connection string are NOT the same as your Atlas credentials.


/**
 * Connection URI. Update <username>, <password>, and <your-cluster-url> to reflect your cluster.
 * See https://docs.mongodb.com/ecosystem/drivers/node/ for more details
 */

const uri = "mongodb+srv://<username>:<password>@<your-cluster-url>/test?retryWrites=true&w=majority";


Now that we have our URI, we can create an instance of MongoClient.


const client = new MongoClient(uri);
await client.connect();
await listDatabases(client);

try {
    await client.connect();

    await listDatabases(client);
 
} catch (e) {
    console.error(e);
}


finally {
    await client.close();
}



main().catch(console.error);


async function main(){
    /**
     * Connection URI. Update <username>, <password>, and <your-cluster-url> to reflect your cluster.
     * See https://docs.mongodb.com/ecosystem/drivers/node/ for more details
     */
    const uri = "mongodb+srv://<username>:<password>@<your-cluster-url>/test?retryWrites=true&w=majority";
 

    const client = new MongoClient(uri);
 
    try {
        // Connect to the MongoDB cluster
        await client.connect();
 
        // Make the appropriate DB calls
        await  listDatabases(client);
 
    } catch (e) {
        console.error(e);
    } finally {
        await client.close();
    }
}


main().catch(console.error);


List the databases in our cluster

async function listDatabases(client){
    databasesList = await client.db().admin().listDatabases();
 
    console.log("Databases:");
    databasesList.databases.forEach(db => console.log(` - ${db.name}`));
};


Save Your File
Execute Your Node.js Script


Databases:
 - sample_airbnb
 - sample_geospatial
 - sample_mflix
 - sample_supplies
 - sample_training
 - sample_weatherdata
 - admin
 - local

-------------------------------------------------------------------------------

//Website 
https://www.mongodb.com/docs/manual/reference/method/db.createCollection/



//User db: Sellect DB

use test            //user dbName

Ex:
use CollectionName    //use products


//Show Collection (Tables)
Ex: 
show collections




//db.createCollection(name, options)

//Create Document
db.createCollection()

Ex:
db.createCollection("users")


//Insert Data into collections              //MongoDB 7
db.collection.insertOne()
db.collection.insertMany()

Ex: 
db.users.insert({name:"ajay", age: 33})




--------------------------------------------------------------------------------------


----> Find Document <----



//Select or find all data  or find all data with ( comparison operators )

Syntax: 
	db.collection.find(query, projection, options)


db.collection.find()                                  //Collection - collection name
db.collection.findOne()


Ex:

db.users.find();
db.student.find().limit(2)                            //Limit 
db.users.find({},{_id:0})                             //Id field not showing
db.users.find({},{_id:0,fname:0})                     //Id field not two showing    1-true, 0-false	

db.users.find({"age":"33","fname":"zubin"})                      //Find with two fields
db.collection.find( { qty: { $gt: "4" } } )
db.users.find({"age":{$lt:"50"}})                                //MongoDB 7 
db.users.findOne({"age":{$eq:"33"}})
db.users.findOne({"age":{$lt:"33"}})
db.users.find({ "fname": { $in: ["geeta","ajay"] } })
	
db.users.distinct("fname",{ age: { $eq: "33" }})                 //Listing distinct names
	
db.users.find({fname: {$ne: "geeta"}})                           // Not Geeta Using $ne
db.users.find({age:{$in:["33","55"]}})                           //Using $in

db.users.find({},{"fname":"geeta","age":"33"}).limit(2)          //Projection:  Selecct Only required Fields
db.users.find({},{fname:1})                                      //Projection       show only fname field
db.users.find({},{fname:1, _id:0})                               //Except id field

db.users.find({$and:[{},{}]})                                
db.users.find({$and:[{name:geeta},{age:33}]})    
db.users.find({$and: [{ fname: "geeta" }, {age: "33"}]})         // Using $and 
db.users.find({$or: [{ fname: "geeta" }, {age: "33"}]})          // Using $or
 
db.customers.find({
  $and: [
    {
      $or: [
        {
          "Country": "Germany"
        },
        {
          "Country": "France"
        }
      ]
    },
    {
      VIP: true
    }
  ]
})

	
db.customers.find({
  $or: [
    {
      Country: "Germany"
    },
    {
      Country: "France"
    }
  ]
})



db.customers.find({
  "VIP": true,
  "Country": "Germany"
})




db.users.findOneAndDelete({"_id":"20"})                  //Find and delete one record, MongoDB 7

db.collection.findAndModify()
db.collection.findOneAndDelete()
db.collection.findOneAndReplace()
db.collection.findOneAndUpdate()

--------------------------------------------------------------------------------------


db.collection.createIndex()
db.collection.createIndexes()
db.collection.dataSize()
db.collection.deleteOne()
db.collection.deleteMany()
db.collection.distinct()


------------------------------------------------------------------


//Insert Documents (Insert data into users table)
db.users.insert({"name" : "tutorialspoint"}),



//Update Data
db.collection.update(query, update, options)


Ex:
db.users.update({

})





db.collection.findOne()
db.collection.drop()
db.collection.deleteOne();
db.collection.drop();
db.books.remove({});

db.createView()


db.students.insertMany([])

--------------------------------------------------------------------------------



-----------------------------------------------------------------------------


Insert Many documents: 


db.students.insertMany([
  { id: 1, name: 'Ryan', gender: 'M' },
  { id: 2, name: 'Joanna', gender: 'F' }
]);

db.students.find({ gender: 'F' });


----------------------------------------------------------------------


	
{
  "name":"ajay", 
  "age":"32",
  "city":"meerut"
}


---------------------------------------------------------------------



Mongodb CMDs:

use database1      //switched to db database1 or create if not exists
db                 //check which database are we connected 

show dbs           //Show databases

db.dropDatabase()  //Drop database 
db.getName()

db.createCollection("teachers")    //Create Collection

db.createCollection("teachers",{capped : true, size : 9232768}){“ok” : 1}    //Create Collection

db.Student.insert( { "Studentname" : "Meena", "StudentBranch" : "Computer Science"})       //Insert Data


db.getCollection()


db.createView()


db.createView()

Syntax: 
	db.createView(<view>, <source>, <pipeline>, <collation>)


db.collection.dataSize()
db.collection.deleteOne()
db.collection.deleteMany()
db.collection.drop()
db.collection.find()
db.collection.findOne()
db.collection.insert()
db.collection.drop()                              //Drop collection in mongodb-7 Ex. db.users.drop()
db.collection.watch()
db.collection.distinct()
db.collection.countDocuments()                   // Mongodh -7
db.collection.estimatedDocumentCount()          // Mongodh -7



db.collection.update():
db.collection.update(query, update, options)


db.collection.validate()
db.collection.validate(<documents>)

db.collection.validate( {
   full: <boolean>,  // Optional
   repair: <boolean>,  // Optional, added in MongoDB 5.0
   checkBSONConformance: <boolean>  // Optional, added in MongoDB 6.2
} )



db.employee.insert({_id : 1,  firstName:"ank"})
db.employee.find()


 db.employee.updateMany(
    { },
    { $set: { join_date: new Date() } }
)


db.employee.updateMany(
    { },
    { $unset: { "join_date": "" } }
)



 db.employee.updateMany(
    { },
    { $set: { join_date: new Date() } }
)



 db.employee.updateMany(
    { },
    { $unset: { "join_date": "" } }
)


 db.users.updateMany(                     //Add new field
    {age:13},
    { $set: { "isElegible": false } }
)


 db.users.updateMany(                     //Add new field
    {age:{$gte:15}},
    { $set: { "isElegible": true } }      //Add new field age greater then 14
)



-------------------------------------------------------------------------


--- Delete Document ---


 db.users.deleteOne(                  //Delete one document whose age is 15
    {age:15}            
)

 db.users.deleteOne(                  //Delete one document whose age is 15
    {name:"ajay"}            
)

 db.users.deleteMany(                     //Delete manay documents
    {age:{$gte:15}},
    { $set: { "isElegible": true } }      //Add new field age greater then 14
)


--------------------------------------------------------------------------


-- Create --

db.coll.insertOne({name: "Max"})
db.coll.insertMany([{name: "Max"}, {name:"Alex"}]) // ordered bulk insert
db.coll.insertMany([{name: "Max"}, {name:"Alex"}], {ordered: false}) // unordered bulk insert
db.coll.insertOne({date: ISODate()})
db.coll.insertOne({name: "Max"}, {"writeConcern": {"w": "majority", "wtimeout": 5000}})


--- Read ---

db.coll.findOne() // returns a single document
db.coll.find()    // returns a cursor - show 20 results - "it" to display more
db.coll.find().pretty()
db.coll.find({name: "Max", age: 32}) // implicit logical "AND".
db.coll.find({date: ISODate("2020-09-25T13:57:17.180Z")})
db.coll.find({name: "Max", age: 32}).explain("executionStats") // or "queryPlanner" or "allPlansExecution"
db.coll.distinct("name")

// Count
db.coll.countDocuments({age: 32}) // alias for an aggregation pipeline - accurate count
db.coll.estimatedDocumentCount()  // estimation based on collection metadata

// Comparison
db.coll.find({"year": {$gt: 1970}})
db.coll.find({"year": {$gte: 1970}})
db.coll.find({"year": {$lt: 1970}})
db.coll.find({"year": {$lte: 1970}})
db.coll.find({"year": {$ne: 1970}})
db.coll.find({"year": {$in: [1958, 1959]}})
db.coll.find({"year": {$nin: [1958, 1959]}})

// Logical
db.coll.find({name:{$not: {$eq: "Max"}}})
db.coll.find({$or: [{"year" : 1958}, {"year" : 1959}]})
db.coll.find({$nor: [{price: 1.99}, {sale: true}]})
db.coll.find({
  $and: [
    {$or: [{qty: {$lt :10}}, {qty :{$gt: 50}}]},
    {$or: [{sale: true}, {price: {$lt: 5 }}]}
  ]
})

// Element
db.coll.find({name: {$exists: true}})
db.coll.find({"zipCode": {$type: 2 }})
db.coll.find({"zipCode": {$type: "string"}})

// Aggregation Pipeline
db.coll.aggregate([
  {$match: {status: "A"}},
  {$group: {_id: "$cust_id", total: {$sum: "$amount"}}},
  {$sort: {total: -1}}
])

// Text search with a "text" index
db.coll.find({$text: {$search: "cake"}}, {score: {$meta: "textScore"}}).sort({score: {$meta: "textScore"}})

// Regex
db.coll.find({name: /^Max/})   // regex: starts by letter "M"
db.coll.find({name: /^Max$/i}) // regex case insensitive

// Array
db.coll.find({tags: {$all: ["Realm", "Charts"]}})
db.coll.find({field: {$size: 2}}) // impossible to index - prefer storing the size of the array & update it
db.coll.find({results: {$elemMatch: {product: "xyz", score: {$gte: 8}}}})

// Projections
db.coll.find({"x": 1}, {"actors": 1})               // actors + _id
db.coll.find({"x": 1}, {"actors": 1, "_id": 0})     // actors
db.coll.find({"x": 1}, {"actors": 0, "summary": 0}) // all but "actors" and "summary"

// Sort, skip, limit
db.coll.find({}).sort({"year": 1, "rating": -1}).skip(10).limit(3)

// Read Concern
db.coll.find().readConcern("majority")




--- Update ---

db.coll.updateOne({"_id": 1}, {$set: {"year": 2016, name: "Max"}})
db.coll.updateOne({"_id": 1}, {$unset: {"year": 1}})
db.coll.updateOne({"_id": 1}, {$rename: {"year": "date"} })
db.coll.updateOne({"_id": 1}, {$inc: {"year": 5}})
db.coll.updateOne({"_id": 1}, {$mul: {price: NumberDecimal("1.25"), qty: 2}})
db.coll.updateOne({"_id": 1}, {$min: {"imdb": 5}})
db.coll.updateOne({"_id": 1}, {$max: {"imdb": 8}})
db.coll.updateOne({"_id": 1}, {$currentDate: {"lastModified": true}})
db.coll.updateOne({"_id": 1}, {$currentDate: {"lastModified": {$type: "timestamp"}}})

// Array
db.coll.updateOne({"_id": 1}, {$push :{"array": 1}})
db.coll.updateOne({"_id": 1}, {$pull :{"array": 1}})
db.coll.updateOne({"_id": 1}, {$addToSet :{"array": 2}})
db.coll.updateOne({"_id": 1}, {$pop: {"array": 1}})  // last element
db.coll.updateOne({"_id": 1}, {$pop: {"array": -1}}) // first element
db.coll.updateOne({"_id": 1}, {$pullAll: {"array" :[3, 4, 5]}})
db.coll.updateOne({"_id": 1}, {$push: {"scores": {$each: [90, 92]}}})
db.coll.updateOne({"_id": 2}, {$push: {"scores": {$each: [40, 60], $sort: 1}}}) // array sorted
db.coll.updateOne({"_id": 1, "grades": 80}, {$set: {"grades.$": 82}})
db.coll.updateMany({}, {$inc: {"grades.$[]": 10}})
db.coll.updateMany({}, {$set: {"grades.$[element]": 100}}, {multi: true, arrayFilters: [{"element": {$gte: 100}}]})

// FindOneAndUpdate
db.coll.findOneAndUpdate({"name": "Max"}, {$inc: {"points": 5}}, {returnNewDocument: true})

// Upsert
db.coll.updateOne({"_id": 1}, {$set: {item: "apple"}, $setOnInsert: {defaultQty: 100}}, {upsert: true})

// Replace
db.coll.replaceOne({"name": "Max"}, {"firstname": "Maxime", "surname": "Beugnet"})

// Write concern
db.coll.updateMany({}, {$set: {"x": 1}}, {"writeConcern": {"w": "majority", "wtimeout": 5000}})




--- Delete ---

db.coll.deleteOne({name: "Max"})
db.coll.deleteMany({name: "Max"}, {"writeConcern": {"w": "majority", "wtimeout": 5000}})
db.coll.deleteMany({}) // WARNING! Deletes all the docs but not the collection itself and its index definitions
db.coll.findOneAndDelete({"name": "Max"})




--- Drop ---


db.coll.drop()    // removes the collection and its index definitions
db.dropDatabase() // double check that you are *NOT* on the PROD cluster... :-)



--- Create ---


// Create collection with a $jsonschema
db.createCollection("contacts", {
   validator: {$jsonSchema: {
      bsonType: "object",
      required: ["phone"],
      properties: {
         phone: {
            bsonType: "string",
            description: "must be a string and is required"
         },
         email: {
            bsonType: "string",
            pattern: "@mongodb\.com$",
            description: "must be a string and match the regular expression pattern"
         },
         status: {
            enum: [ "Unknown", "Incomplete" ],
            description: "can only be one of the enum values"
         }
      }
   }}
})




//Other Collection Functions


db.coll.stats()
db.coll.storageSize()
db.coll.totalIndexSize()
db.coll.totalSize()
db.coll.validate({full: true})
db.coll.renameCollection("new_coll", true) // 2nd parameter to drop the target collection if exists





Indexes
List Indexes

db.coll.getIndexes()
db.coll.getIndexKeys()


Create Indexes

// Index Types
db.coll.createIndex({"name": 1})                // single field index
db.coll.createIndex({"name": 1, "date": 1})     // compound index
db.coll.createIndex({foo: "text", bar: "text"}) // text index
db.coll.createIndex({"$**": "text"})            // wildcard text index
db.coll.createIndex({"userMetadata.$**": 1})    // wildcard index
db.coll.createIndex({"loc": "2d"})              // 2d index
db.coll.createIndex({"loc": "2dsphere"})        // 2dsphere index
db.coll.createIndex({"_id": "hashed"})          // hashed index

// Index Options
db.coll.createIndex({"lastModifiedDate": 1}, {expireAfterSeconds: 3600})      // TTL index
db.coll.createIndex({"name": 1}, {unique: true})
db.coll.createIndex({"name": 1}, {partialFilterExpression: {age: {$gt: 18}}}) // partial index
db.coll.createIndex({"name": 1}, {collation: {locale: 'en', strength: 1}})    // case insensitive index with strength = 1 or 2
db.coll.createIndex({"name": 1 }, {sparse: true})



Drop Indexes

db.coll.dropIndex("name_1")


Hide/Unhide Indexes

db.coll.hideIndex("name_1")
db.coll.unhideIndex("name_1")



------------------------------------------------------------------------------------------------



----> Handy commands <----

use admin
db.createUser({"user": "root", "pwd": passwordPrompt(), "roles": ["root"]})
db.dropUser("root")
db.auth( "user", passwordPrompt() )

use test
db.getSiblingDB("dbname")
db.currentOp()
db.killOp(123) // opid

db.fsyncLock()
db.fsyncUnlock()

db.getCollectionNames()
db.getCollectionInfos()
db.printCollectionStats()
db.stats()

db.getReplicationInfo()
db.printReplicationInfo()
db.hello()
db.hostInfo()

db.shutdownServer()
db.serverStatus()

db.getProfilingStatus()
db.setProfilingLevel(1, 200) // 0 == OFF, 1 == ON with slowms, 2 == ON

db.enableFreeMonitoring()
db.disableFreeMonitoring()
db.getFreeMonitoringStatus()

db.createView("viewName", "sourceColl", [{$project:{department: 1}}])


-------------------------------------------------------------------------------------------------



----> Inserted Documents <-----



db.scores.insertMany([
   { "_id" : 1, "team" : "Fearful Mallards", "score" : 25000 },
   { "_id" : 2, "team" : "Tactful Mooses", "score" : 23500 },
   { "_id" : 3, "team" : "Aquatic Ponies", "score" : 19250 },
   { "_id" : 4, "team" : "Cuddly Zebras", "score" : 15235 },
   { "_id" : 5, "team" : "Garrulous Bears", "score" : 18000 }
]);



db.myColl.insertMany([
   { _id: 1, category: "café", status: "A" },
   { _id: 2, category: "cafe", status: "a" },
   { _id: 3, category: "cafE", status: "a" }
]);


db.students.insertMany( [
   { _id: 1, test1: 95, test2: 92, test3: 90, modified: new Date("01/05/2020") },
   { _id: 2, test1: 98, test2: 100, test3: 102, modified: new Date("01/05/2020") },
   { _id: 3, test1: 95, test2: 110, modified: new Date("01/04/2020") }
] )


db.students2.insertMany( [
   { "_id" : 1, quiz1: 8, test2: 100, quiz2: 9, modified: new Date("01/05/2020") },
   { "_id" : 2, quiz2: 5, test1: 80, test2: 89, modified: new Date("01/05/2020") },
] )

	
db.teams.insertOne({team: "Mavs", position: "Guard", points: 31})
db.teams.insertOne({team: "Spurs", position: "Guard", points: 22})
db.teams.insertOne({team: "Rockets", position: "Center", points: 19})
db.teams.insertOne({team: "Warriors", position: "Forward", points: 26})
db.teams.insertOne({team: "Cavs", position: "Guard", points: 33})

--------------------------------------------------------------------------------------------------



----> Use a View to Join Two Collections <-----

You can use $lookup to create a view over two collections and then run queries against the view. Applications can query the view without having to construct or maintain complex pipelines.


Example

Create two sample collections, inventory and orders:

db.inventory.insertMany( [
   { prodId: 100, price: 20, quantity: 125 },
   { prodId: 101, price: 10, quantity: 234 },
   { prodId: 102, price: 15, quantity: 432 },
   { prodId: 103, price: 17, quantity: 320 }
] )
db.orders.insertMany( [
   { orderId: 201, custid: 301, prodId: 100, numPurchased: 20 },
   { orderId: 202, custid: 302, prodId: 101, numPurchased: 10 },
   { orderId: 203, custid: 303, prodId: 102, numPurchased: 5 },
   { orderId: 204, custid: 303, prodId: 103, numPurchased: 15 },
   { orderId: 205, custid: 303, prodId: 103, numPurchased: 20 },
   { orderId: 206, custid: 302, prodId: 102, numPurchased: 1 },
   { orderId: 207, custid: 302, prodId: 101, numPurchased: 5 },
   { orderId: 208, custid: 301, prodId: 100, numPurchased: 10 },
   { orderId: 209, custid: 303, prodId: 103, numPurchased: 30 }
] )




--------------------------------------------------------------------------------------------------



----- Mongodb queries -----


1. Joins: ($lookup): left outer join, right outer join, full join, inner join 

vdo: https://youtu.be/zzVa5cvQK6w?list=PLA3GkZPtsafZydhN4nP0h7hw7PQuLsBv1&t=483   

Ex:

db.cust.aggregate([{$lookup:{from:"orders",localField:"_id", foreignField:"customer_id",as:"orderDetail"}}]).pretty()
   


$inc, $min, $max, $mul, $unset, $rename, upsert,     $push,$pop,$addToSet       (Topics)
$project, $bucket, aggregate(), 
$lookup (like Left Outer Join in mysql)


//Update field but not add to the document

-- Decrease all age by -2
db.users.updateMany({},{$inc:{age-2}})

--Increase age of sita to 50 only if her age is lesser than it 
db.users.updateOne({name:"sita"},{$max:{age:50}})                 //Now updated age is 50        $max	

-- Decrease in above 
db.users.updateOne({name:"sita"},{$min:{age:23}})                 //Now updated age is 23           $min

-- Multipy by factor or 2
db.users.updateOne({name:"sita"},{$mul:{age:2}})                 //Now Multiply by 2                     $mul

-- Unset
db.users.updateOne({name:"sita"},{$unset:{age:200}})            //Remove age                                    $unset


-- Rename of field
db.users.updateOne({name:"sita"},{$rename:{age:"studentAge"}})  //Rename of field, rename age with studentAge   $rename



-- Rename of field
db.users.updateOne({},{$rename:{age:"studentAge"}})           //Rename of all fields, rename age with studentAge   $rename

--Insert document if condition not found (agar golu nahi milta hai toh)
db.users.updateOne({name:"golu"},{$set:{age:100}},{upsert:true})   // Agar golu nahi milta toh ye document insert kardo

----------------------------------------------------------------------------------------------------------------------------








































































--------------------------------------------------------