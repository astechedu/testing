>>>> MongoDB View <<<<<


--------------------------------------------------------------

--------------------------------------------------------------
--------------------------------------------------------------
Keys: Create, Insert, Find, Drop, Update, limit(), 

      $set, $inc, $gte, $eq, $expr, $not, $in, $or, $and, $nin, $ne, $lte, $gte, 
      sort, 


      Updates with Aggregation Pipeline


Ith the update operations, the aggregation pipeline can consist of the following stages:

    $addFields, $set, $project, $unset, $replaceRoot, $replaceWith,


    Inserted Document, Projection, 



--------------------------------------------------------------------------
--------------------------------------------------------------------------

--------------------------------------------------------------------------


//Mongo create view  

--------------------------------------------------------------------------
--------------------------------------------------------------------------



----> Views <---


A MongoDB view is a read-only queryable object whose contents are defined by an aggregation pipeline on other collections or views.

MongoDB does not persist the view contents to disk. A view's content is computed on-demand when a client queries the view.


Create and Manage Views

To learn how to create and manage views, see the following resources:

    Create a Materialized View in the MongoDB Atlas UI

    Create and Query a View

    Use a View to Join Two Collections

    Create a View with Default Collation

    Modify a View

    Remove a View




Create and Query a View:


To create a view, use one of the following methods:

    Use db.createCollection()

    Use db.createView()


//db.createCollection() :

Syntax: 


db.createCollection(
  "<viewName>",
  {
    "viewOn" : "<source>",
    "pipeline" : [<pipeline>],
    "collation" : { <collation> }
  }
)


db.createView():
Syntax:

db.createView(
  "<viewName>",
  "<source>",
  [<pipeline>],
  {
    "collation" : { <collation> }
  }
)



Restrictions:
             $out, $merge, $lookup or $facet


Populate the Collection:

Create a students collection to use for this example:

db.students.insertMany( [
   { sID: 22001, name: "Alex", year: 1, score: 4.0 },
   { sID: 21001, name: "bernie", year: 2, score: 3.7 },
   { sID: 20010, name: "Chris", year: 3, score: 2.5 },
   { sID: 22021, name: "Drew", year: 1, score: 3.2 },
   { sID: 17301, name: "harley", year: 6, score: 3.1 },
   { sID: 21022, name: "Farmer", year: 1, score: 2.2 },
   { sID: 20020, name: "george", year: 3, score: 2.8 },
   { sID: 18020, name: "Harley", year: 5, score: 2.8 },
] )


Use db.createView() to Create a View:

Use db.createView() to Create a View

Use db.createView() to create a view that is limited to first year students:

db.createView(
   "firstYears",
   "students",
   [ { $match: { year: 1 } } ]
)



db.firstYears.find({}, { _id: 0 } )


[
  { sID: 22001, name: 'Alex', year: 1, score: 4 },
  { sID: 22021, name: 'Drew', year: 1, score: 3.2 },
  { sID: 21022, name: 'Farmer', year: 1, score: 2.2 }
]


Use db.createCollection() to Create a View:

The db.createCollection() method allows you to create a collection or a view with specific options.


db.createCollection(
   "graduateStudents",
   {
      viewOn: "students",
      pipeline: [ { $match: { $expr: { $gt: [ "$year", 4 ] } } } ],
      collation: { locale: "en", caseFirst: "upper" }
   }
)



db.graduateStudents.aggregate(
   [
      { $sort: { name: 1 } },
      { $unset: [ "_id" ] }
   ]
)





-----------------------------------------------------------------------------------------------------




























--------------------------------------------------------