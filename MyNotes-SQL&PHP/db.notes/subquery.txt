>>> SQL Subquery <<<<


--------------------------------------------------------------
--------------------------------------------------------------
Keys: Subquery, 
--------------------------------------------------------------
--------------------------------------------------------------



Website: 
https://www.javatpoint.com/mysql-subquery

--------------------------------------------------------------
--------------------------------------------------------------

--- Subquery ---

Syntax: 

SELECT column_name(s)
FROM  table_name
WHERE column_name operator
    (SELECT column_name FROM table_name WHERE c );



Example: 

1. Comparison operators used

SELECT *
FROM payment
WHERE amount > (select avg(amount) from payment)


2. Logical opearator used

SELECT customer_id from customer;

SELECT customer_id, amount, mode
FROM payment
WHERE customer_id IN (select customer_id from customer)


3. Exists operator

SELECT first_name, last_name
FROM customer c
WHERE EXISTS (
    SELECT customer_id, amount
    FROM payment p
    WHERE p.customer_id = c.customer_id 
    AND amout > 100
);



---x---




MySQL Subquery Syntax:


    SELECT column_list (s) FROM  table_name  
    WHERE  column_name OPERATOR  
       (SELECT column_list (s)  FROM table_name [WHERE])  


MySQL Subquery Example:

    SELECT emp_name, city, income FROM employees   
       WHERE emp_id IN (SELECT emp_id FROM employees);  



MySQL Subquery with Comparison Operator:

    SELECT * FROM employees   
       WHERE emp_id IN (SELECT emp_id FROM employees   
             WHERE income > 350000);  


    SELECT emp_name, city, income FROM employees   
       WHERE income = (SELECT MAX(income) FROM employees);  



MySQL Subquery with IN or NOT-IN Operator:


    SELECT Name, City FROM student  
    WHERE City NOT IN (  
    SELECT City FROM student2 WHERE City='Los Angeles');  


MySQL Subquery in the FROM Clause:


    SELECT Max(items), MIN(items), FLOOR(AVG(items))  
    FROM  
        (SELECT order_id, COUNT(order_id) AS items FROM orders  
        GROUP BY order_date) AS Student_order_detail;  

---x---




-- MySQL Correlated Subqueries ---


    SELECT emp_name, city, income  
    FROM employees emp WHERE income > (   
    SELECT AVG(income) FROM employees WHERE city = emp.city);  



MySQL Subqueries with EXISTS or NOT EXISTS:


SELECT name, occupation, age FROM customer C  
WHERE EXISTS (SELECT * FROM Orders O  
WHERE C.cust_id = O.cust_id); 



    SELECT name, occupation, age FROM customer C  
    WHERE NOT EXISTS (SELECT * FROM Orders O  
    WHERE C.cust_id = O.cust_id);    



MySQL ROW Subqueries:

    SELECT * FROM customer C WHERE ROW(cust_id, occupation) = (  
    SELECT order_id, order_date FROM Orders O WHERE C.cust_id = O.cust_id);  



MySQL Subqueries with ALL, ANY, and SOME:


    operand comparison_operator ANY (subquery)  
    operand comparison_operator ALL (subquery)  
    operand comparison_operator SOME (subquery)  



    SELECT cust_id, name FROM customer WHERE   
    cust_id > ANY (SELECT cust_id FROM Orders);  

SELECT cust_id, name FROM customer WHERE   
cust_id > ALL (SELECT cust_id FROM Orders);


--------------------------------------------------------------
--------------------------------------------------------------

*:)

-- Subqery --

//https://www.w3resource.com/sql/subqueries/understanding-sql-subqueries.php

 A subquery is a SQL query nested inside a larger query.

    A subquery may occur in :
        - A SELECT clause
        - A FROM clause
        - A WHERE clause

//SQL Subqueries Example :

SELECT *  
FROM `marks`  
WHERE studentid = 'V002';


//Now we want to write a query to identify all students who get better marks than that of the student who's StudentID is 'V002', but we do not know the marks of 'V002'.

- To solve the problem, we require two queries. One query returns the marks (stored in Total_marks field) of 'V002' and a second query identifies the students who get better marks than the result of the first query. 



First query:

SELECT *  
FROM `marks`  
WHERE studentid = 'V002';


//The result of the query is 80.
- Using the result of this query, here we have written another query to identify the students who get better marks than 80. Here is the query : 


Second query:

SELECT a.studentid, a.name, b.total_marks
FROM student a, marks b
WHERE a.studentid = b.studentid
AND b.total_marks >80;


//Above two queries identified students who get the better number than the student who's StudentID is 'V002' (Abhay).

You can combine the above two queries by placing one query inside the other. The subquery (also called the 'inner query') is the query inside the parentheses. See the following code and query result :

SQL Code:

SELECT a.studentid, a.name, b.total_marks
FROM student a, marks b
WHERE a.studentid = b.studentid AND b.total_marks >
(SELECT total_marks
FROM marks
WHERE studentid =  'V002');



//Subqueries: General Rules:

A subquery SELECT statement is almost similar to the SELECT statement and it is used to begin a regular or outer query. Here is the syntax of a subquery:

Syntax:

(SELECT [DISTINCT] subquery_select_argument
FROM {table_name | view_name}
{table_name | view_name} ...
[WHERE search_conditions]
[GROUP BY aggregate_expression [, aggregate_expression] ...]
[HAVING search_conditions])



//Type of Subqueries

    Single row subquery        : Returns zero or one row.
    Multiple row subquery      : Returns one or more rows.
    Multiple column subqueries : Returns one or more columns.
    Correlated subqueries      : Reference one or more columns in the outer SQL statement. The subquery is known as a correlated                                        subquery because the subquery is related to the outer SQL statement.
    Nested subqueries          : Subqueries are placed within another subquery.




//Subqueries with INSERT statement

INSERT statement can be used with subqueries. Here are the syntax and an example of subqueries using INSERT statement.

Syntax:

INSERT INTO table_name [ (column1 [, column2 ]) ]
SELECT [ *|column1 [, column2 ]
FROM table1 [, table2 ]
[ WHERE VALUE OPERATOR ];


//If we want to insert those orders from 'orders' table which have the advance_amount 2000 or 5000 into 'neworder' table the following SQL can be used:


INSERT INTO neworder
SELECT * FROM  orders
WHERE advance_amount in(2000,5000);



//Subqueries with UPDATE statement:

Syntax:

UPDATE table  SET column_name = new_value
[ WHERE OPERATOR [ VALUE ]
(SELECT COLUMN_NAME
FROM TABLE_NAME)     
[ WHERE) ]



//If we want to update that ord_date in 'neworder' table with '15-JAN-10' which have the difference of ord_amount and advance_amount is less than the minimum ord_amount of 'orders' table the following SQL can be used: 




UPDATE neworder
SET ord_date='15-JAN-10'
WHERE ord_amount-advance_amount <
(SELECT MIN(ord_amount) FROM orders);


//Subqueries with DELETE statement:


Syntax:

DELETE FROM TABLE_NAME
[ WHERE OPERATOR [ VALUE ]
(SELECT COLUMN_NAME    
FROM TABLE_NAME)    
[ WHERE) ]


//If we want to delete those orders from 'neworder' table which advance_amount are less than the maximum advance_amount of 'orders' table, the following SQL can be used:


DELETE FROM neworder
WHERE advance_amount<
(SELECT MAX(advance_amount) FROM orders);





--------------------------------------------------------------

-- Subquery Examples --




SELECT city_destination, transportation, ticket_price, travel_time
FROM one_way_ticket
WHERE city_destination = (
    SELECT closest_city
    FROM best_10_places
    WHERE activity_type = 'snorkeling'
      AND ranking_position = 1
  )
  AND city_origin = 'Paris'


SELECT city_destination, ticket_price, travel_time, transportation
FROM one_way_ticket
WHERE ticket_price < (
    SELECT ticket_price
    FROM one_way_ticket
    WHERE city_destination = 'Bariloche'
      AND city_origin = 'Paris'
  )
  AND city_origin = 'Paris'



SELECT city_destination, transportation, ticket_price, travel_time
FROM one_way_ticket
WHERE city_destination IN (
    SELECT closest_city
    FROM best_10_places
    WHERE activity_type = 'snorkeling'
      AND ranking_position <= 3
  )
  AND city_origin = 'Paris'



SELECT city_destination, ticket_price, pseudo_table.quantity
FROM one_way_ticket
JOIN (
    SELECT closest_city AS city, count(*) AS quantity
    FROM best_10_places
    GROUP BY 1
  ) pseudo_table
  ON one_way_ticket.pseudo_table.city



SELECT city_destination, transportation, ticket_price, travel_time
FROM one_way_ticket
WHERE EXISTS (
    SELECT closest_city
    FROM best_10_places
    WHERE activity_type = 'snorkeling'
      AND closest_city = one_way_ticket.city_destination
  )
  AND EXISTS (
    SELECT closest_city
    FROM best_10_places
    WHERE activity_type = 'trekking'
    AND closest_city = one_way_ticket.city_destination
  )
  AND city_origin = 'Paris'


----x----

--------------------------------------------------------------


combinations with ALL and ANY, I’ve included a table with the most common uses of these operators:

Condition	Returns TRUE if ...	Returns FALSE if ...

Where 10 > ANY ( subquery )	The subquery returns at least one value that’s greater than 10.	All returned values are 10 or less.
Where 10 > ALL ( subquery )	The subquery returns only values greater than 10.	The subquery returns at least one value of 10 or less.
Where 10 = ANY (subquery)	The subquery returns at least one value equal to 10.	No returned values are equal to 10.
Where 10 = ALL (subquery)	All values returned by subquery are 10.	At least one returned value is not equal to 10.
--------------------------------------------------------------





