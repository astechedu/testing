>>>>> Shell Script <<<<<<

----------------------------------------------------------------------

key: shell script, if, then, else, for loop,

----------------------------------------------------------------------

Linux cmd: check any is working or not:
lsof -i 8000

-----------------------------------------------------------------------

Reference Website: 
https://www.freecodecamp.org/news/bash-scripting-tutorial-linux-shell-script-and-command-line-for-beginners/

-----------------------------------------------------------------
Basic Bash commands (echo, read, etc.)

Here is a list of some of the most commonly used bash commands:

    cd:    	Change the directory to a different location.
    ls:   	 List the contents of the current directory.
    mkdir: 	Create a new directory.
    touch: 	Create a new file.
    rm: 	Remove a file or directory.
    cp: 	Copy a file or directory.
    mv: 	Move or rename a file or directory.
    echo: 	Print text to the terminal.
    cat: 	Concatenate and print the contents of a file.
    grep: 	Search for a pattern in a file.
    chmod: 	Change the permissions of a file or directory.
    sudo: 	Run a command with administrative privileges.
    df: 	Display the amount of disk space available.
    history: 	Show a list of previously executed commands.
    ps: 	Display information about running processes.

-----------------------------------------------------------------

Shebang or header
#!/bin/bash


//CMDS
which bash
vi run_all.sh


//Running Script

   1. sh run_all.sh
   2. bash run_all.sh
   3. ./run_all.sh

-----------------------------------------------------------------

Displaying output: 

//1. Printing to the terminal:

echo "Hello, World!"    

------------------------------------------------------------------
//2.  Writing to a file:

echo "This is some text." > output.txt

------------------------------------------------------------------
//3.  Appending to a file:

echo "More text." >> output.txt

------------------------------------------------------------------
//4.  Redirecting output:

ls > files.txt

------------------------------------------------------------------
//Comparisons

AND -a and OR -o

------------------------------------------------------------------

//Script Example:

#!/bin/bash
echo "Today is " `date`

echo -e "\nenter the path to directory"
read the_path

echo -e "\n you path has the following files and folders: "
ls $the_path
----------------------------------------------------------------
Permmission: 
chmod u+x run_all.sh
------------------------------------------------------------------


//Conditional statements (if/else): if, if-else, if-elif-else

if [[ condition ]];
then
	statement
elif [[ condition ]]; then
	statement 
else
	do this by default
fi
--------------------------------------------------------------

//While Loops: 

while read line
do
  echo $line
done < input.txt

--------------------------------------------------------------

//Comparisons

AND -a and OR -o

--------------------------------------------------------------

//Script to determine if a number is positive, negative, or zero

#!/bin/bash

echo "Please enter a number: "
read num

if [ $num -gt 0 ]; then
  echo "$num is positive"
elif [ $num -lt 0 ]; then
  echo "$num is negative"
else
  echo "$num is zero"
fi

--------------------------------------------------------------
//Looping and Branching in Bash

While loop:


//While loop that iterates 10 times.

#!/bin/bash
i=1
while [[ $i -le 10 ]] ; do
   echo "$i"
  (( i += 1 ))
done

-----------------------------------------------------------------


//For loop that iterates 5 times.

For loop:


#!/bin/bash

for i in {1..5}
do
    echo $i
done


---------------------------------------------------------------
//Case statements
//Case statements syntax

case expression in
    pattern1)
        # code to execute if expression matches pattern1
        ;;
    pattern2)
        # code to execute if expression matches pattern2
        ;;
    pattern3)
        # code to execute if expression matches pattern3
        ;;
    *)
        # code to execute if none of the above patterns match expression
        ;;
esac


--------------------------------------------------------------

//Example: 
//Example of case statement

fruit="apple"

case $fruit in
    "apple")
        echo "This is a red fruit."
        ;;
    "banana")
        echo "This is a yellow fruit."
        ;;
    "orange")
        echo "This is an orange fruit."
        ;;
    *)
        echo "Unknown fruit."
        ;;
esac

----------------------------------------------------------------


//How to Schedule Scripts using cron

Below is the syntax to schedule crons:

# Cron job example
* * * * * sh /path/to/script.sh



-------------------------------------------------------------------------------------------------------
//Below are some examples of scheduling cron jobs.

Schedule 	Description 	                                       Example
0 0 * * * 	Run a script at midnight every day 	               0 0 * * * /path/to/script.sh
*/5 * * * * 	Run a script every 5 minutes 	                       */5 * * * * /path/to/script.sh
0 6 * * 1-5 	Run a script at 6 am from Monday to Friday 	        0 6 * * 1-5 /path/to/script.sh
0 0 1-7 * * 	Run a script on the first 7 days of every month 	0 0 1-7 * * /path/to/script.sh
0 12 1 * * 	Run a script on the first day of every month at noon 	0 12 1 * * /path/to/script.sh

--------------------------------------------------------------------------------------------------------

// This option enables debugging mode

Set the set -x option


#!/bin/bash

set -x

# Your script goes here

------------------------------------------------------------------

//Check the exit code

#!/bin/bash

# Your script goes here

if [ $? -ne 0 ]; then
    echo "Error occurred."
fi

--------------------------------------------------------------

Use echo statements


#!/bin/bash

# Your script goes here

echo "Value of variable x is: $x"

# More code goes here

--------------------------------------------

//This option will cause Bash to exit with an error if any command in the script fails

Use the set -e option

#!/bin/bash

set -e

# Your script goes here

---------------------------------------------

//Troubleshooting crons by verifying logs

//For Ubuntu/Debian, you can find cronlogs at:

/var/log/syslog

---------------------------------------------------

Reference Website: 

https://www.freecodecamp.org/news/bash-scripting-tutorial-linux-shell-script-and-command-line-for-beginners/

---------------------------------------------------


//Using if then else and fi

myfile.sh (In Kali-linux)

1. Enter and read string or password

#!/bin/bash

echo "Enter password: "
read pass
if [$pass="ajay123"]
then
  echo "You entered correct password"
else
  echo "You entered wrong password"
fi

-----



2. Enter any number and read 


#!/bin/bash
echo "Enter any number"
read num1

if [$num1=100]
then
 echo "You entered 100"
else
 echo "You entered except 100"
fi




3. Enter two numbers and compare them

#!/bin/bash
echo "Enter first number: "
read n1
echo "Enter second number: "
read n2

if [$n1 -eq $n2]
then
 echo "Number1 id equel to number2"
else
 echo "Number1 is not equal to number2"
fi


4. For loop printing number 1 to 3

#!/bin/bash
for i in 1 2 3
do
 echo $i
done


5. Printing File names using for loop

#!/bin/bash
for FILE in $HOME/.bash*
do
   echo $FILE
done

--------------------------------------------









































