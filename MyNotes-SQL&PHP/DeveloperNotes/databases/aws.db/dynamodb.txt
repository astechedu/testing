<<< DynamoDB (AWS) <<<<<



------------------------------------------------------------------
------------------------------------------------------------------

------------------------------------------------------------------

keys: create dynamo table, insert table using lamda function, lambda function,
      import os, import boto3, 


------------------------------------------------------------------

------------------------------------------------------------------


//All Details AWS Console with examples:
https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/getting-started-step-1.html

CONNECTION: 

//AWS CLI Connection with windows 10:
//Create or login IAM User 
//Install aws cli on windows

Steps: 

c:/Users/Ajay> aws configure

AWS Access Key ID:    copy from IAM and paste here  
AWS Secret Access Key:  -- same above --
Default output name [us-easst-1]:
Deafult ouput format [None];


Then: 

aws dynamodb list-tables --endpoint-url http://localhost:8000 --profile myprofile
    
{
   "TableNames": []
}


Details:


|
|
V

----------------------------------------------------------

Next: 

//Verification
//create dynamodb table

c:/Users/ajay>

aws dynamodb create-table \ 
--table-name Music \ 
--attribute-definitions AttributeName=Artist,AttributeType=S AttributeName=SongTitle,AttributeType=S \ 
--key-schema AttributeName=Artist,KeyType=HASH AttributeName=SongTitle,KeyType=RANGE \ 
--provisioned-throughput ReadCapacityUnits=10,WriteCapacityUnits=5


Now Verify table on aws in dynamodb
click on tables button to the left side 
Table is created

-----------------------------------------------

------------------------------------------------------------------
Now:

//Step 1: Create a table: 


 Partition key — Artist
 Sort key — SongTitle



AWS CLI:

The following AWS CLI example creates a new Music table using create-table.

Linux
-----

aws dynamodb create-table \
    --table-name Music \
    --attribute-definitions \
        AttributeName=Artist,AttributeType=S \
        AttributeName=SongTitle,AttributeType=S \
    --key-schema \
        AttributeName=Artist,KeyType=HASH \
        AttributeName=SongTitle,KeyType=RANGE \
    --provisioned-throughput \
        ReadCapacityUnits=5,WriteCapacityUnits=5 \
    --table-class STANDARD



Windows CMD
-----------
aws dynamodb create-table ^
    --table-name Music ^
    --attribute-definitions ^
        AttributeName=Artist,AttributeType=S ^
        AttributeName=SongTitle,AttributeType=S ^
    --key-schema ^
        AttributeName=Artist,KeyType=HASH ^
        AttributeName=SongTitle,KeyType=RANGE ^
    --provisioned-throughput ^
        ReadCapacityUnits=5,WriteCapacityUnits=5 ^
    --table-class STANDARD



//Using create-table returns the following sample result.


{
    "TableDescription": {
        "AttributeDefinitions": [
            {
                "AttributeName": "Artist",
                "AttributeType": "S"
            },
            {
                "AttributeName": "SongTitle",
                "AttributeType": "S"
            }
        ],
        "TableName": "Music",
        "KeySchema": [
            {
                "AttributeName": "Artist",
                "KeyType": "HASH"
            },
            {
                "AttributeName": "SongTitle",
                "KeyType": "RANGE"
            }
        ],
        "TableStatus": "CREATING",
        "CreationDateTime": "2023-03-29T12:11:43.379000-04:00",
        "ProvisionedThroughput": {
            "NumberOfDecreasesToday": 0,
            "ReadCapacityUnits": 5,
            "WriteCapacityUnits": 5
        },
        "TableSizeBytes": 0,
        "ItemCount": 0,
        "TableArn": "arn:aws:dynamodb:us-east-1:111122223333:table/Music",
        "TableId": "60abf404-1839-4917-a89b-a8b0ab2a1b87",
        "TableClassSummary": {
            "TableClass": "STANDARD"
        }
    }
}
}

------------------------------------------------------------------------------

Describe Table: 

Linux:
 aws dynamodb describe-table --table-name Music | grep TableStatus


Windows CMD:
 aws dynamodb describe-table --table-name Music | findstr TableStatus



Linux:

aws dynamodb update-continuous-backups \ 
    --table-name Music \ 
    --point-in-time-recovery-specification \ 
        PointInTimeRecoveryEnabled=true


Windows CMD:
aws dynamodb update-continuous-backups --table-name Music --point-in-time-recovery-specification PointInTimeRecoveryEnabled=true



//This command returns the following result.

{
    "ContinuousBackupsDescription": {
        "ContinuousBackupsStatus": "ENABLED",
        "PointInTimeRecoveryDescription": {
            "PointInTimeRecoveryStatus": "ENABLED",
            "EarliestRestorableDateTime": "2023-03-29T12:18:19-04:00",
            "LatestRestorableDateTime": "2023-03-29T12:18:19-04:00"
        }
    }
}


------------------------------------------------------------------------------------------------------------


Step 01: 
create table transactions on aws dynamodb 

Step 02: 

Write code on notepade or any editor

Step 03:

Go to Lambda and type 'Transactions_InsertDemo'




Step 04:

Write the code in any editor and paste here in lambda function



Code: 

import boto3

def lambda_handler(event, context):
    client = boto3.resource('dynamodb')
    table = client.Table('Transaction')

    # S, N, M, L, B, SS, NS              //Langs
   
     input = {'TransactionId': '31', 'State': 'PENDING', 
     'RelatedTransaction': [32, 33, 34],
     'CustomerDetails': {'Name': "Nohn Doe", "AccountBalance": 50}}

     response = table.put_item(Item-input)


Step 05:

After paste above code in lambda console clice 'Save" button + click on 'Test' Button 
If Not error showing

Type the event name in input box + 'Save' Button 
New again click on 'Test' Button
Click on 'Start Search'





--------------------------------------------------------------------------------------------------------------

//AWS dynamodb

Lambda function: 
  
 def lambda_handler(event, context) {
   //
 }



//Configure and access environment variables
//Encrypt environment variables? Yes, please!
//Decrypt environment variables with the AWS SDK


//Decrypt secret snippet: 

import boto3
import os

from base64 import b64decode
ENCRIPTED = os.environ['DB_PASS']
# Dcrypt code should run once and variables stored outside of the function
# handler so that these are decrypted onece per container
DECRYPTED = boto3.client('kms').decrypt(CiphertextBlob=b64decode(ENCRYPTED))['Planintext....']

def lambda_handler(event, context):
 # TODO handle the event here
 pass

-------------------------------------------------------

import os

def lambda_handler(event, context):
    DB_HOST = os.environ["DB_HOST"]
    DB_USER = os.environ["DB_USER"]
    DB_PASS = os.environ["DB_PASS"]
    print("Connected to %s as %s" % (DB_HOST, DB_USER))
    return None




//
import os
import boto3
from base64 import b64decode

DB_HOST = os.environ["DB_HOST"] 
DB_USER = os.environ["DB_USER"]
 
DB_PASS_ENCRYPTED = os.environ["DB_PASS"]
cipherTextBlob = b64decode(DB_PASS_ENCRYPTED)
DB_PASS_DECRYPTED = boto3.client('kms').decrypt(CiphertextBlob=cipherTextBlob)['Plaintext']

def lambda_handler(event, context): 
    print("Connected to %s as %s" % (DB_HOST, DB_USER)) 
    return None


---------------------------------------------------------------------------------------------------------------





