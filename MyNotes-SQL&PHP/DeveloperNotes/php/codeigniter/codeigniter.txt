>>> Codeigniter 4 <<<<<



-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------

Keys: spark cmds, Api JWT, Query Builder Class, getResult, get(), Join, 
      migrations, Ajax Post, Response Ajax Data In Controller, Admin AdminLte, 

-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------



Crud Link: https://www.positronx.io/codeigniter-crud-with-bootstrap-and-mysql-example/




//Codeigniter 4 REST API Tutorial with Example: JWT
https://www.positronx.io/codeigniter-rest-api-tutorial-with-example/


//CodeIgniter 4 Rest Api Example Tutorial: Products
https://www.tutsmake.com/codeigniter-4-rest-api-example-tutorial/

//Codeigniter 4 CRUD
https://www.positronx.io/codeigniter-crud-with-bootstrap-and-mysql-example/



API: 

//CodeIgniter 4 Tutorial part 1 ~ RESTful API JWT Authentication

https://medium.com/geekculture/codeigniter-4-tutorial-restful-api-jwt-authentication-d5963d797ec4


//CodeIgniter 4 tutorial part 2 ~ Rest Api CRUD Codeigniter 4
https://medium.com/geekculture/codeigniter-4-tutorial-part-2-rest-api-crud-654ebbf49452



Rating: 
//Rating in codeigniter 4 
https://makitweb.com/5-star-rating-system-with-jquery-ajax-in-codeigniter-4/


//Codeigniter 4 Guides
https://developerhowto.com/2022/12/27/create-a-codeigniter-4-application/

-------------------------------------------------------------------------------------

//Installation Codeigniter 4
Installtion : composer create-project codeigniter4/appstarter


-------------------------------------------------------------------------------------

//How to include custom css and js 

Folder: app, assets, systems

  assets -> css
         -> js

  Link:   Now work

//In Public Folder: css & js file 
<link href="<?php echo base_url(); ?>css/style.css" rel="stylesheet">

//Favicon icon not found:
<link rel="icon" type="image/png" href='<?php echo base_url(); ?>/favicon.ico'>

<?php echo anchor('user/create','Add', ['class' => 'btn btn-info']); ?>
<?php echo anchor('user/index/'.$user['id'], 'View', ['class'=>'btn btn-info']) ?>

-------------------------------------------------------------------------------------

Codeigniter 4 CMDs: 

//Development Server
php spark serve


Migrations: 

php spark migrate

php spark make:seeder SeederName
php spark make:migration MigrationName
php spark db:seed SeederName
php spark db:table [tablename]

For Unix:
php spark migrate -g test -n Acme\\Blog

For Windows:
php spark migrate -g test -n Acme\Blog
php spark migrate:rollback               // -g -b -f
php spark migrate:refresh               // -g -n --all -f
php spark migrate:status
php spark make:migration <class> [options]    // --session  --table   --dbgroup  --namespace  --suffix

php spark make:model ModelName
php spark make:controller ControllerName 

------------------------------------------------------------------------------------
------------------------------------------------------------------------------------

Codeigniter 4 DataBase: 

Query Builder Class:
//https://www.codeigniter.com/user_guide/database/query_builder.html?highlight=join

Loading the Query Builder:


$db      = \Config\Database::connect();
$builder = $db->table('users');

Selecting Data:

$builder = $db->table('mytable');
$query   = $builder->get();  // Produces: SELECT * FROM mytable

 foreach ($query->getResult() as $row) {

    echo "<pre>";print_r($row);
 }

-----------------------------------------

$query = $builder->get(10, 20);

-----------------------------------------

$query = $builder->get();

foreach ($query->getResult() as $row) {
    echo $row->title;
    //echo "<pre>";print_r($row);
}

-----------------------------------------

//$builder->getCompiledSelect() 
//Only Compile query not run

$sql = $builder->getCompiledSelect();
echo $sql;
// Prints string: SELECT * FROM mytable

------------------------------------------


echo $builder->limit(10, 20)->getCompiledSelect(false);
/*
 * Prints string: SELECT * FROM mytable LIMIT 20, 10
 * (in MySQL. Other databases have slightly different syntax)
 */

echo $builder->select('title, content, date')->getCompiledSelect();
// Prints string: SELECT title, content, date FROM mytable LIMIT 20, 10

-----------------------------------------------------------------------------

$builder->getWhere()

$query = $builder->getWhere(['id' => $id], $limit, $offset);

$builder->select()

$builder->select('title, content, date');
$query = $builder->get();
// Executes: SELECT title, content, date FROM mytable


----------------------------------------------------------

$builder->selectAvg()

$builder->selectAvg('age');
$query = $builder->get();
// Produces: SELECT AVG(age) as age FROM mytable

-------------------------------------------------------------
//$builder->selectCount()

$builder->selectCount('age');
$query = $builder->get();
// Produces: SELECT COUNT(age) as age FROM mytable

-------------------------------------------------------------

//$builder->selectSubquery()

$subquery = $db->table('countries')->select('name')->where('id', 1);
$builder  = $db->table('users')->select('name')->selectSubquery($subquery, 'country');
$query    = $builder->get();
// Produces: SELECT `name`, (SELECT `name` FROM `countries` WHERE `id` = 1) `country` FROM `users`

--------------------------------------------------------------------------------------------------

//$builder->from()

 $db      = \Config\Database::connect();
 $builder = $db->table('products');

$builder = $db->table('users');
$builder->select('title, content, date');
$builder->from('mytable');
$query = $builder->get();
// Produces: SELECT title, content, date FROM users, mytable

-----------------------------------------------------------------------------------

==> J O I N S <==

//$builder->join()

$builder = $db->table('blogs');
$builder->select('*');
$builder->join('comments', 'comments.id = blogs.id');
$query = $builder->get();
/*
 * Produces:
 * SELECT * FROM blogs JOIN comments ON comments.id = blogs.id
 */


Example: 

 Join: 

  $db      = \Config\Database::connect();
  $builder = $db->table('products');

//$builder->select('*');
//$builder->join('categories', 'categories.category_id = products.category_id');
//$query = $builder->get();

foreach ($query->getResult() as $row) {
   echo "<pre>";print_r($row);
}





-------------------------------------------------------------------------------------

$builder->join('comments', 'comments.id = blogs.id', 'left');
// Produces: LEFT JOIN comments ON comments.id = blogs.id
------------------------------------------------------------------------------------

//Looking for Specific Data

$builder->where()

$builder->where('name', $name);
// Produces: WHERE name = 'Joe'

$builder->where('name', $name);
$builder->where('title', $title);
$builder->where('status', $status);
// WHERE name = 'Joe' AND title = 'boss' AND status = 'active'
---------------------------------------------------------------------------------------

Custom key/value method

$builder->where('name !=', $name);
$builder->where('id <', $id);
// Produces: WHERE name != 'Joe' AND id < 45


//Associative array method


$array = ['name' => $name, 'title' => $title, 'status' => $status];
$builder->where($array);
// Produces: WHERE name = 'Joe' AND title = 'boss' AND status = 'active'


Custom string:

$where = "name='Joe' AND status='boss' OR status='active'";
$builder->where($where);

--------------------------------------------------------------------------------------

$builder->update()

$data = [
    'title' => $title,
    'name'  => $name,
    'date'  => $date,
];

$builder->where('id', $id);
$builder->update($data);

-------------------------------------------------------------------------------------


use CodeIgniter\Database\RawSql;

$data = [
    'id'          => new RawSql('DEFAULT'),
    'title'       => 'My title',
    'name'        => 'My Name',
    'date'        => '2022-01-01',
    'last_update' => new RawSql('CURRENT_TIMESTAMP()'),
];

$builder->insert($data);
/* Produces:
    INSERT INTO mytable (id, title, name, date, last_update)
    VALUES (DEFAULT, 'My title', 'My name', '2022-01-01', CURRENT_TIMESTAMP())
*/

------------------------------------------------------------------------------------

//$builder->delete()

$builder->delete(['id' => $id]);
// Produces: DELETE FROM mytable WHERE id = $id



-------------------------------------------------------------------------------------

Transactions:

Running Transactions:

$this->db->transStart();
$this->db->query('AN SQL QUERY...');
$this->db->query('ANOTHER QUERY...');
$this->db->query('AND YET ANOTHER QUERY...');
$this->db->transComplete();


Managing Errors: 


$this->db->transStart();
$this->db->query('AN SQL QUERY...');
$this->db->query('ANOTHER QUERY...');
$this->db->transComplete();

if ($this->db->transStatus() === false) {
    // generate an error... or use the log_message() function to log your error
}



------------------------------------------------------------------------------------
------------------------------------------------------------------------------------




[Top](#top)
<a name="ci-crud"></a>

*Codeigniterm 4 Bootstrap CRUD Application Example (Not Tested)

    Step 1: Download or Install Codeigniter 4
    Step 2: Enable Codeigniter Errors
    Step 3: Set Up Database
    Step 4: Create New Model
    Step 5: Create CRUD Controller
    Step 6: Create Routes
    Step 7: Insert Data into Database
    Step 8: Show Data List & Delete
    Step 9: Edit and Update Data


	composer create-project codeigniter4/appstarter
	cd codeigniter-crud-example


Open app/Config/Boot/development.php file and set the display_errors to 1 instead of 0. Repeat the same process in app/Config/Boot/production.php file.



	ini_set('display_errors', '1');



DB Config: 

public $default = [
        'DSN'      => '',
        'hostname' => 'localhost',
        'username' => 'root',
        'password' => 'root',
        'database' => 'demo',
        'DBDriver' => 'MySQLi',
        'DBPrefix' => '',
        'pConnect' => false,
        'DBDebug'  => (ENVIRONMENT !== 'development'),
        'cacheOn'  => false,
        'cacheDir' => '',
        'charset'  => 'utf8',
        'DBCollat' => 'utf8_general_ci',
        'swapPre'  => '',
        'encrypt'  => false,
        'compress' => false,
        'strictOn' => false,
        'failover' => [],
        'port'     => 3306,
	];





# MAMPP
public $default = [
  ...
     'hostname' => '/Applications/MAMP/tmp/mysql/mysql.sock',
  ...
]
# XAMPP
public $default = [
  ...
     'hostname' => '/Applications/XAMPP/xamppfiles/var/mysql/mysql.sock',
  ...
]



Create New Model:

<?php 
namespace App\Models;
use CodeIgniter\Model;
class UserModel extends Model
{
    protected $table = 'users';
    protected $primaryKey = 'id';
    
    protected $allowedFields = ['name', 'email'];
}


Create CRUD Controller:

app/Controllers/UserCrud.php

<?php 
namespace App\Controllers;
use App\Models\UserModel;
use CodeIgniter\Controller;
class UserCrud extends Controller
{
    // show users list
    public function index(){
        $userModel = new UserModel();
        $data['users'] = $userModel->orderBy('id', 'DESC')->findAll();
        return view('user_view', $data);
    }
    // add user form
    public function create(){
        return view('add_user');
    }
 
    // insert data
    public function store() {
        $userModel = new UserModel();
        $data = [
            'name' => $this->request->getVar('name'),
            'email'  => $this->request->getVar('email'),
        ];
        $userModel->insert($data);
        return $this->response->redirect(site_url('/users-list'));
    }
    // show single user
    public function singleUser($id = null){
        $userModel = new UserModel();
        $data['user_obj'] = $userModel->where('id', $id)->first();
        return view('edit_user', $data);
    }
    // update user data
    public function update(){
        $userModel = new UserModel();
        $id = $this->request->getVar('id');
        $data = [
            'name' => $this->request->getVar('name'),
            'email'  => $this->request->getVar('email'),
        ];
        $userModel->update($id, $data);
        return $this->response->redirect(site_url('/users-list'));
    }
 
    // delete user
    public function delete($id = null){
        $userModel = new UserModel();
        $data['user'] = $userModel->where('id', $id)->delete($id);
        return $this->response->redirect(site_url('/users-list'));
    }    
}




Create Routes in Codeigniter:
 app/Config/Routes.php


// CRUD RESTful Routes
$routes->get('users-list', 'UserCrud::index');
$routes->get('user-form', 'UserCrud::create');
$routes->post('submit-form', 'UserCrud::store');
$routes->get('edit-view/(:num)', 'UserCrud::singleUser/$1');
$routes->post('update', 'UserCrud::update');
$routes->get('delete/(:num)', 'UserCrud::delete/$1');



Codeigniter Insert Data in Database Example


app/Views/add_user.php

<!DOCTYPE html>
<html>
<head>
  <title>Codeigniter 4 Add User With Validation Demo</title>
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css">
  <style>
    .container {
      max-width: 500px;
    }
    .error {
      display: block;
      padding-top: 5px;
      font-size: 14px;
      color: red;
    }
  </style>
</head>
<body>
  <div class="container mt-5">
    <form method="post" id="add_create" name="add_create" 
    action="<?= site_url('/submit-form') ?>">
      <div class="form-group">
        <label>Name</label>
        <input type="text" name="name" class="form-control">
      </div>
      <div class="form-group">
        <label>Email</label>
        <input type="text" name="email" class="form-control">
      </div>
      <div class="form-group">
        <button type="submit" class="btn btn-primary btn-block">Update Data</button>
      </div>
    </form>
  </div>
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.2/jquery.validate.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.2/additional-methods.min.js"></script>
  <script>
    if ($("#add_create").length > 0) {
      $("#add_create").validate({
        rules: {
          name: {
            required: true,
          },
          email: {
            required: true,
            maxlength: 60,
            email: true,
          },
        },
        messages: {
          name: {
            required: "Name is required.",
          },
          email: {
            required: "Email is required.",
            email: "It does not seem to be a valid email.",
            maxlength: "The email should be or equal to 60 chars.",
          },
        },
      })
    }
  </script>
</body>
</html>



//Show Data List & Delete

app/Views/user_view.php

<!doctype html>
<html lang="en">
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>Codeigniter 4 CRUD App Example - positronx.io</title>
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css">
</head>
<body>
<div class="container mt-4">
    <div class="d-flex justify-content-end">
        <a href="<?php echo site_url('/user-form') ?>" class="btn btn-success mb-2">Add User</a>
	</div>
    <?php
     if(isset($_SESSION['msg'])){
        echo $_SESSION['msg'];
      }
     ?>
  <div class="mt-3">
     <table class="table table-bordered" id="users-list">
       <thead>
          <tr>
             <th>User Id</th>
             <th>Name</th>
             <th>Email</th>
             <th>Action</th>
          </tr>
       </thead>
       <tbody>
          <?php if($users): ?>
          <?php foreach($users as $user): ?>
          <tr>
             <td><?php echo $user['id']; ?></td>
             <td><?php echo $user['name']; ?></td>
             <td><?php echo $user['email']; ?></td>
             <td>
              <a href="<?php echo base_url('edit-view/'.$user['id']);?>" class="btn btn-primary btn-sm">Edit</a>
              <a href="<?php echo base_url('delete/'.$user['id']);?>" class="btn btn-danger btn-sm">Delete</a>
              </td>
          </tr>
         <?php endforeach; ?>
         <?php endif; ?>
       </tbody>
     </table>
  </div>
</div>
 
<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.10.21/css/jquery.dataTables.min.css">
<script type="text/javascript" src="https://cdn.datatables.net/1.10.21/js/jquery.dataTables.min.js"></script>
<script>
    $(document).ready( function () {
      $('#users-list').DataTable();
  } );
</script>
</body>
</html>



//Edit and Update Data

app/Views/edit_view.php

<!DOCTYPE html>
<html>
<head>
  <title>Codeigniter 4 CRUD - Edit User Demo</title>
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css">
  <style>
    .container {
      max-width: 500px;
    }
    .error {
      display: block;
      padding-top: 5px;
      font-size: 14px;
      color: red;
    }
  </style>
</head>
<body>
  <div class="container mt-5">
    <form method="post" id="update_user" name="update_user" 
    action="<?= site_url('/update') ?>">
      <input type="hidden" name="id" id="id" value="<?php echo $user_obj['id']; ?>">
      <div class="form-group">
        <label>Name</label>
        <input type="text" name="name" class="form-control" value="<?php echo $user_obj['name']; ?>">
      </div>
      <div class="form-group">
        <label>Email</label>
        <input type="email" name="email" class="form-control" value="<?php echo $user_obj['email']; ?>">
      </div>
      <div class="form-group">
        <button type="submit" class="btn btn-danger btn-block">Save Data</button>
      </div>
    </form>
  </div>
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.2/jquery.validate.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.2/additional-methods.min.js"></script>
  <script>
    if ($("#update_user").length > 0) {
      $("#update_user").validate({
        rules: {
          name: {
            required: true,
          },
          email: {
            required: true,
            maxlength: 60,
            email: true,
          },
        },
        messages: {
          name: {
            required: "Name is required.",
          },
          email: {
            required: "Email is required.",
            email: "It does not seem to be a valid email.",
            maxlength: "The email should be or equal to 60 chars.",
          },
        },
      })
    }
  </script>
</body>
</html>




	php spark serve

http://localhost:8080/index.php/users-list

#
:end:



------------------------------------------


[Codeigniter 4 CSS & JS Links](#css-js-links)
[Codeigniter 4 Calling Helper Classes](#helpers)


[Top](#top)
<a name="css-js-links"></a>

## Codeigniter 4 CSS & JS Files Paths

	public/assets/css/my.css
	public/assets/js/my.js

Links In View Files: 

	<link href="<?php echo base_url(); ?>/assets/css/my.css" rel="stylesheet">
	<script src="<?php echo base_url(); ?>/assets/js/my.js"type="text/javascript"></script>
	OR
	<link href="<?php echo base_url(); ?>assets/css/my.css" rel="stylesheet">
	<script src="<?php echo base_url(); ?>assets/js/my.js"type="text/javascript"></script>  




--------------------------------------------------------------------------



[Top](#top)
<a name="helpers"></a>
##Codeigniter 4 Calling Helper Classes: 

Location: 

	app/Helpers
        app/Helpers/my_helper.php



Loading in BaseController:

class BaseController extends Controller{

   protected $request;
   protected $helpers = ['custom1_helper'];
   public function initController(RequestInterface $request, ResponseInterface $response, LoggerInterface $logger)
   {

       parent::initController($request, $response, $logger);

   }
}


Loading in Controller:


php spark make:controller PageController

   public function index(){
      
      helper('my_helper'); // Loading single helper
      helper(['custom1_helper','custom2_helper']);      //Or Multiple Helpers
   }



Loading in View:


<body>
   <?php 
   // helper("custom1_helper"); // Single helper loading
   helper(["custom1_helper","custom2_helper"]); // Multiple helper loading
   ?>
<body>




----------------------------------------------------------------------------------


Codeigniter 4 Libraries: 

Config: 

//app/libraries/My.php     //Create a class in lib folder


<?php

namespace App\Libraries;

class My {

	public  function f1() {

       return "Hi, this is my first library";

	}
}




//Write the code given below in User Conroller 
//app/controllers/user


<?php 

namespace App\Controllers;

use App\Libraries\My;

class User extends BaseController
{
   
    public function index(){
      
        $lb = new My();
        echo $lb->f1();

        return view('index');
    }
}


------------------------------------------------------

Anchor CI4: 

 <?=anchor(base_url(), 'Click here', ['id' => 'my_link', 'name' => 'my_link', 'rel' => 'nofollow', 'target' => '_blank']);?>

<?php echo anchor('user/index/'.$user['id'], 'View', ['class'=>'btn btn-info']) ?>

----------------------------------------------------------------------------------

-----------------------------------------------------



Codeigniter 4 Libraries :

//Create my library
app/Libraries

//Write a class My 

<?php

namespace App\Libraries;

class My {

	public  function f1() {

	   echo "Hi, this is my first library";
       //return "Hi, this is my first library";		

	}
}

-----------------------------------------------------




//In User Controller, Loading Lib and create object of class My
<?php 

namespace App\Controllers;

use App\Models\UserModel;

use App\Libraries\My;

class User extends BaseController
{    
    public $users = '' ;

    public  function __construct()
    {      
    	//helper('form');      // loading helper
      //helper('hfuns');
      //fun3();
      //echo fun1(3);
      $mylib = new My();
      //echo $mylib->f1();
      $mylib->f1();

    }

-------------------------------------------------------------------------------
-------------------------------------------------------------------------------

1. 

//API JWT: 

composer create-project codeigniter4/appstarter ci-4-jwt
CI_ENVIRONMENT = development
app/Config/Database.php.
php spark make:model UserModel
php spark make:migration AddUser
php spark migrate
composer require firebase/php-jwt

//.env

#--------------------------------------------------------------------
# JWT
#--------------------------------------------------------------------
JWT_SECRET = 'JWT SECRET KEY SAMPLE HERE'

app/Controllers/Login.php
app/Controllers/Register.php
app/Controllers/User.php
php spark make:filter AuthFilter
app/Config/Filters.php


//Register Routes
$routes->group("api", function ($routes) {
    $routes->post("register", "Register::index");
    $routes->post("login", "Login::index");
    $routes->get("users", "User::index", ['filter' => 'authFilter']);
});

php spark serve


POST  localhost:8000/api/register
body
form-data
Give Values to save data


POST localhost:8000/api/login
body
form-data

GET localhost:8000/api/users
Authentication

Token           djdjdl3ljfljkl34ljlkj3jljl

-------------------------------------------------------------------------------


2. 
CodeIgniter 4 tutorial part 2 ~ Rest Api CRUD Codeigniter 4


CodeIgniter 4 tutorial part 2 ~ Rest Api CRUD

    Step 1 — Function Controller
    Step 2 — Setup Routes
    Step 3 — Start Development server



Function Controller:

//show()

public function show($id = null)
    {
        $model = new UserModel();
        $data = $model->getWhere(['id' => $id])->getResult();
        if($data){
            return $this->respond($data);
        }else{
            return $this->failNotFound('No Data Found with id '.$id);
        }
    }




//Create()

public function create()
    {
        $model = new UserModel();
        $data = [
            'email' => $this->request->getVar('email'),
            'password' => password_hash($this->request->getVar('password'), PASSWORD_DEFAULT)
        ];
        $model->insert($data);
        $response = [
            'status'   => 201,
            'error'    => null,
            'messages' => [
                'success' => 'Data Saved'
            ]
        ];
        return $this->respondCreated($response);
    }



//Update()

// update product
   public function update($id = null)
    {
        $model = new UserModel();
        $input = $this->request->getRawInput();
        $data = [
            'email' => $this->request->getVar('email'),
            'password' => password_hash($this->request->getVar('password'), PASSWORD_DEFAULT)
        ];
        $model->update($id, $data);
        $response = [
            'status'   => 200,
            'error'    => null,
            'messages' => [
                'success' => 'Data Updated'
            ]
        ];
        return $this->respond($response);
    }



Index() — This is used to retrieve all users.
create() — This method is used to insert user info into the DB table.
update() — This is used to validate server-side form data and update it into the MySQL database.
show() — This method is used to fetch single user info into DB table.
delete() — This method is used to delete data from the MySQL database.




//Setup Routes:

$routes->group('users', ['filter' => 'authFilter'], function($routes) {
        $routes->get("/", "User::index");
        $routes->get("(:any)", "User::show/$1");
        $routes->post("/", "User::create");
        $routes->put("(:any)", "User::update/$1");
        $routes->delete("(:any)", "User::delete/$1");
    });


php spark serve

http://localhost/demo/

OR

http://localhost:8080/



GET  http://localhost:8080/api/users/all

Token                jkdjfkj3jkljljl


GET  http://localhost:8080/api/users/1

Token                jkdjfkj3jkljljl



POST  http://localhost:8080/api/users/

Body

x-www-form-urlencoded       jkdjfkj3jkljljl

email                   kjdfjd@gmail.com
password                abcd1234



PUT  http://localhost:8080/api/users/1

Autherization   Body
form-data

email                   kjdfjd@gmail.com
password                abcd1234


DELETE  http://localhost:8080/api/users/2

Autherization   Body
form-data

Token                jkdjfkj3jkljljl


--------------------------------------------------------------


//Migrations: 

php spark make
php spark migrate:migration <class> [option]


<?php

namespace App\Database\Migrations;

use CodeIgniter\Database\Migration;

class AddBlog extends Migration
{
    public function up()
    {
        $this->forge->addField([
            'blog_id' => [
                'type'           => 'INT',
                'constraint'     => 5,
                'unsigned'       => true,
                'auto_increment' => true,
            ],
            'blog_title' => [
                'type'       => 'VARCHAR',
                'constraint' => '100',
            ],
            'blog_description' => [
                'type' => 'TEXT',
                'null' => true,
            ],
             'created_at datetime default current_timestamp',
             'updated_at datetime default current_timestamp on update current_timestamp',            
        ]);
          $this->forge->createPrimaryKey('id');
          $this->forge->createTable('blogs');

        //$this->forge->addKey('blog_id', true);
        //$this->forge->createTable('blogs');
    }

    public function down()
    {
        $this->forge->dropTable('blogs');
    }
}



// php spark migrate
//php spark migrate:rollback
//php spark migrate:refresh
//php spark migrate:status

-----------------------------------------------------------------------------------

$this->forge->addField(["fieldname"=>["type"=>'TYPE',constraint=>SIZE]]);
$this->forge->addKey('fieldname', true);
$this->forge->addUniqueKey(['field1','field2']);
$this->forge->createTable('tablename');
$this->forge->dropTable('tablename'); )
$this->forge->dropTable('tablename',true); // drop if exists
$this->forge->dropTable('tablename',true, true); // if exists + cascade

$forge->dropColumn('table_name', ['column_1', 'column_2']);
$forge->dropKey('tablename', 'index_name');


-----------------------------------------------------------------------------------

2. 
namespace AppDatabaseMigrations;
use CodeIgniterDatabaseMigration;

class CreateUsers extends Migration
{
    public function up()
    {
        $this->forge->addField([
            'id' => [
                'type'           => 'INT',
                'unsigned'       => true,
                'auto_increment' => true,
            ],
            'email' => [
                'type'           => 'VARCHAR',
                'constraint'     => 64,
            ],
            'password' => [
                'type'           => 'VARCHAR',
                'constraint'     => 32,
            ],
            'user_type' => [
                'type'           => 'INT',
                'default'        => '0',
            ],
            'login_at' => [
                'type'           => 'DATETIME',
                'null'           => true,
            ],
        ]);
        $this->forge->addKey('id', true);
        $this->forge->addUniqueKey(['email']);
        $this->forge->createTable('users');
    }

    public function down()
    {
        $this->forge->dropTable('users');
    }
}



php spark migrate.

--------------------------------------------------------------


php spark make:seeder SeedName
php spark make:seeder UsersData


<?php

namespace AppDatabaseSeeds;

use CodeIgniterDatabaseSeeder;

class UsersData extends Seeder
{
    public function run()
    {
        // clear data
        $this->db->table('user')->truncate(); 
        $this->db->table('users')->insert([
            "id" => 1001,
            "email" => "admin@example.com",
            "password" => md5("Admin.123"),
            "user_type" => 1, // admin type
        ]); 
        $this->db->table('users')->insert([
            "id" => 1002,
            "email" => "user@example.com",
            "password" => md5("User.123"),
            "user_type" => 0, // regular user
        ]); 
    }
}


Run Seeder:
php spark db:seed SeedName


-------------------------------------------------------------------------------------

Ajax Post:  (Working)

Controller: User.php
View: views/index.php


//User.php Controller: 

 public function test()
 {  

      if ($this->request->isAJAX())
      {
          echo json_encode(['name'=>'ajay']);
      }   
      
  }

}


//index.php


<script type="text/javascript">

$(function(){
    $('button').on('click',function(e) {        
        e.preventDefault();

         //var url= "<?php echo base_url(); ?>ControllerName/ActionName";
        //var url= "<?php echo base_url(); ?>ProductController/test";
        var url= "<?php echo base_url(); ?>user/test";

        $.ajax({           
            type: 'post',   
            url: url,                   
            dataType:'json',           
            cache: false,
            success: function(result) {
                alert('ok');
            },
            error: function(result) {
                alert('error');
            }
        });

    }); 

}); 
</script>

-------------------------------------------------------------------------------------

//Response Ajax Data In Controller

 public function ajay($id=null,$price=null)
 {  

      if ($this->request->isAJAX())
      {         
          $data['id'] = $this->request->getVar('id');
          $data['price'] = $this->request->getVar('price');
          echo json_encode($data);
      }   
      
  }

//This Also Work:  'OR'

 public function ajay($id=null,$price=null)
 {  
              
          $data['id'] = $this->request->getVar('id');
          $data['price'] = $this->request->getVar('price');
          echo json_encode($data);        
      
  }

-------------------------------------------------------------------------------------

Admin AdminLte: 

Views/templates/admin_template.php
Controller: Dashboard.php




-------------------------------------------------------------------------------------









