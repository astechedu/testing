<<<<< PHP Unit Test >>>>


--------------------------------------------------------
--------------------------------------------------------
Keys: Phpunit 10 Test setup in Core PHP, 

--------------------------------------------------------
--------------------------------------------------------

--------------------------------------------------------
--------------------------------------------------------

--------------------------------------------------------
--------------------------------------------------------

//PHP Unit Text Example:
https://www.freecodecamp.org/news/test-php-code-with-phpunit/


//Document
//https://docs.phpunit.de/en/10.0/writing-tests-for-phpunit.html


//PHP Test phpunit 10 config
//https://phpunit.de/getting-started/phpunit-10.html


//In command line to run phpunit test
//php ./vendor/bin/phpunit tests


//Freasers
//PHP With code: PHP Important projects Suggestion
https://www.interviewbit.com/blog/php-projects/



----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------


------------------------------------------------------------
Assert Functions:

$this->assertEquals(3, true);
$this->assertSame(3, true);
$this->assertEqualsWithDelta(0.99, "1", 0.1); // passes :\

------------------------------------------------------------

//Phpunit 10 Test setup in Core PHP  (Working)

//Cmd
php ./vendor/bin/phpunit --version
 
//Run Test cmd
php ./vendor/bin/phpunit 
OR
php ./vendor/bin/phpunit tests


Dirs Structures: 

tests / CalculatorTest.php
vendor
phpunit.xml
composer.json
composer.lock


//1. Composer.json 

{
    "require-dev": {
        "phpunit/phpunit": "10"
    }
}

//2.

phpunit.xml

<?xml version="1.0" encoding="UTF-8" ?>

    <phpunit bootstrap="vendor/autoload.php" colors="true">
        <testsuites>
            <testsuite name="unit">
                <directory>tests</directory>
            </testsuite>
        </testsuites>
    </phpunit>


//3.

tests/CalculatorTest.php

<?php

use PHPUnit\Framework\TestCase;


class CalculatorTest extends TestCase {
	
   public function testAddCanNumbers() {
     
     $this->assertSame(1,1);
   }

   public function testSbtractCanNumbers() {
     
     $this->assertSame(1,1);
   }

}



//4. Run commands

php ./vendor/bin/phpunit --version
OR
php ./vendor/bin/phpunit 
php ./vendor/bin/phpunit tests        //Run test




//More Adding as NameSpace Using PSR-4

{
    "require-dev": {
        "phpunit/phpunit": "10"
    },
    "autoload": {
    	"psr-4": {
    		"App\\":"app"
    	}
    }
}


composer dumpautoload

//Creating app/Maths.php

<?php 
namespace App;

class Maths {
	
   public function add($num1,$num2) {
      
      return $num1 + $num2;

   }

   public function sub($num1,$num2) {
     
      return $num1 - $num2;     

   }

   public function muliply($num1,$num2) {     
     
      return $num1 * $num2;

   }  
 
   public function devide($num1,$num2) {     
     
      return $num1 / $num2;     

   }     
   
}

?>


//Tests/Calculator.php

<?php declare(strict_types=1);

use PHPUnit\Framework\TestCase;

//Method 3
use App\Maths;

class CalculatorTest extends TestCase {
	
  //Method 1
   public function testAddCanNumbers() {
      
     $this->assertSame(2,(1+1));
   }



//Method 2
//Creating Object from Maths.php file in app folder

  public function testAdd() {

      $maths = new Maths();

      $add = $maths->add(2,2);

      $this->assertEquals(4, $add);

  }
  
     
  public function testSub() {

      $maths = new Maths();

      $sub = $maths->sub(2,2);

      $this->assertEquals(0, $sub);

  } 

  
   
}

?>



----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------




//PHP Unit Test Example (Test Function or single component or Single functionality)

//How to Test PHP Code With PHPUnit



Installation: 

$ mkdir test-project
$ cd test-project
$ composer init


//composer.json


{
    "name": "zubair/test-project",
    "require-dev": {
        "phpunit/phpunit": "^9.5"
    },
    "autoload": {
        "psr-4": {
            "Zubair\\TestProject\\": "src/"
        }
    },
    "authors": [
        {
            "name": "Idris Aweda Zubair",
            "email": "zubairidrisaweda@gmail.com"
        }
    ],
    "require": {}
}


--------------------------------------------------------------

//PHPUnit Testing Example


<?php

namespace Zubair\TestProject;

use InvalidArgumentException;

class User
{
    public int $age;
    public array $favorite_movies = [];
    public string $name;

    /**
     * @param int $age
     * @param string $name
     */
    public function __construct(int $age, string $name)
    {
        $this->age = $age;
        $this->name = $name;
    }

    public function tellName(): string
    {
        return "My name is " . $this->name . ".";
    }

    public function tellAge(): string
    {
        return "I am " . $this->age . " years old.";
    }

    public function addFavoriteMovie(string $movie): bool
    {
        $this->favorite_movies[] = $movie;

        return true;
    }

    public function removeFavoriteMovie(string $movie): bool
    {
        if (!in_array($movie, $this->favorite_movies)) throw new InvalidArgumentException("Unknown movie: " . $movie);

        unset($this->favorite_movies[array_search($movie, $this->favorite_movies)]);

        return true;
    }
}

-------------------------------------------------------------------------------------------------------------------------



<?php

namespace Zubair\TestProject;

use PHPUnit\Framework\TestCase;

final class UserTest extends TestCase
{
    // Tests will go here
}

-------------------------------------------------------------------


Test Constructor: 



public function testClassConstructor()
{
    $user = new User(18, 'John');

    $this->assertSame('John', $user->name);
    $this->assertSame(18, $user->age);
    $this->assertEmpty($user->favorite_movies);
}


-------------------------------------------------------------------



//How to Run Tests in PHPUnit

./vendor/bin/phpunit --verbose tests

OR

./vendor/bin/phpunit --verbose tests/UserTest.php

----------------------------------------------------------------------

//Edit the code to check if the user age is the same as 21.

public function testClassConstructor()
{
    $user = new User(18, 'John');

    $this->assertSame('John', $user->name);
    $this->assertSame(21, $user->age);
    $this->assertEmpty($user->favorite_movies);
} 

-----------------------------------------------------------------------

//Test testName and tellAge

public function testTellName()
{
    $user = new User(18, 'John');

    $this->assertIsString($user->tellName());
    $this->assertStringContainsStringIgnoringCase('John', $user->tellName());
}

-----------------------------------------------------------------------------------


public function testTellAge()
{
    $user = new User(18, 'John');

    $this->assertIsString($user->tellAge());
    $this->assertStringContainsStringIgnoringCase('18', $user->tellAge());
}
--------------------------------------------------------------------------------------


//Test addFavoriteMovie


public function testAddFavoriteMovie()
{
    $user = new User(18, 'John');

    $this->assertTrue($user->addFavoriteMovie('Avengers'));
    $this->assertContains('Avengers', $user->favorite_movies);
    $this->assertCount(1, $user->favorite_movies);
}


-----------------------------------------------------------------------------------------



//Test removeFavoriteMovie

Finally, we can test that the method to remove a movie works.

public function testRemoveFavoriteMovie()
{
    $user = new User(18, 'John');

    $this->assertTrue($user->addFavoriteMovie('Avengers'));
    $this->assertTrue($user->addFavoriteMovie('Justice League'));

    $this->assertTrue($user->removeFavoriteMovie('Avengers'));
    $this->assertNotContains('Avengers', $user->favorite_movies);
    $this->assertCount(1, $user->favorite_movies);
}

---------------------------------------------------------------------------------------









